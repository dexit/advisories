(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* globals jQuery */

var enquire = require('../../bower_components/enquire/dist/enquire.js')
require('../../bower_components/jquery-accessibleMegaMenu/js/jquery-accessibleMegaMenu.js')

'use strict'

jQuery(function ($) {
  $('.email_button').click(function (e) {
    var confirm
    if (!confirm('Are you sure?')) {
      return
    }
    var data = {
      action: 'send_email',
      target: $(e.target).attr('id'),
      subject: $(e.target).data('subject'),
      body: $($(e.target).data('body')).val()
    }
    console.log(data)
    $('.email_results').removeClass('alert-danger')
    $.post('/wp-admin/admin-ajax.php', data, function (data, status, xhr) {
      $('.email_results').html(data)
      if (status !== 'success') {
        $('.email_results').addClass('alert-danger')
      }
      $('.email_results').removeClass('hidden')
    })
  })
})

jQuery(function ($) {
  enquire.register('screen and (min-width:779px)', {
    match: function () {
      // Main Nav
      $('.menu-header-menu-container').accessibleMegaMenu({
        uuidPrefix: 'accessible-nav',
        menuClass: 'nav-menu',
        topNavItemClass: 'nav-item',
        panelClass: 'sub-nav',
        panelGroupClass: 'sub-nav-group',
        hoverClass: 'hover',
        focusClass: 'focus',
        openClass: 'open'
      })
      // hack so that the megamenu doesn't show flash of css animation after the page loads.
      setTimeout(function () {
        $('body').removeClass('init')
      }, 500)
      // Change aria-hidden state
      $('#js-main-navigation-toggle').attr('aria-hidden', 'true')
    },
    unmatch: function () {
    }
  })
})

// Change aria-hidden state
jQuery(function ($) {
  enquire.register('screen and (max-width:779px)', {
    match: function () {
      $('#js-main-navigation-toggle').attr('aria-hidden', 'false')
      $('.sub-nav').attr('aria-hidden', 'false')
    },
    unmatch: function () {
      $('#js-main-navigation-toggle').attr('aria-hidden', 'true')
      $('.sub-nav').attr('aria-hidden', 'true')
    }
  })
})

jQuery(function ($) {
  // Extend jQuery to make a toggle text function.
  jQuery.fn.extend({
    toggleText: function (stateOne, stateTwo) {
      return this.each(function () {
        stateTwo = stateTwo || ''
        $(this).text() !== stateTwo && stateOne ? $(this).text(stateTwo) : $(this).text(stateOne)
      })
    }
  })
})

// Toggle navigation
jQuery(function ($) {
  $('#js-main-navigation-toggle').click(function () {
    $(this).toggleText('Close', 'Menu')
    $('#js-main-navigation').toggleClass('open')
  })
})

// Search form
jQuery(function ($) {
  $('.search-form input[name=post_type]').change(function () {
    $('form#searchform').submit()
  })
})

// Add selected class and aria roles to checked input labels
jQuery(function ($) {
  $('input[type=radio],input[type=checkbox]').each(function () {
    $('input[type=radio],input[type=checkbox]').attr('aria-checked', 'false').parent().removeClass('checked')
    $('input[type=radio]:checked,input[type=checkbox]:checked').attr('aria-checked', 'true').parent().addClass('checked')
  })
})

},{"../../bower_components/enquire/dist/enquire.js":2,"../../bower_components/jquery-accessibleMegaMenu/js/jquery-accessibleMegaMenu.js":3}],2:[function(require,module,exports){
/*!
 * enquire.js v2.1.2 - Awesome Media Queries in JavaScript
 * Copyright (c) 2014 Nick Williams - http://wicky.nillia.ms/enquire.js
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

;(function (name, context, factory) {
	var matchMedia = window.matchMedia;

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = factory(matchMedia);
	}
	else if (typeof define === 'function' && define.amd) {
		define(function() {
			return (context[name] = factory(matchMedia));
		});
	}
	else {
		context[name] = factory(matchMedia);
	}
}('enquire', this, function (matchMedia) {

	'use strict';

    /*jshint unused:false */
    /**
     * Helper function for iterating over a collection
     *
     * @param collection
     * @param fn
     */
    function each(collection, fn) {
        var i      = 0,
            length = collection.length,
            cont;

        for(i; i < length; i++) {
            cont = fn(collection[i], i);
            if(cont === false) {
                break; //allow early exit
            }
        }
    }

    /**
     * Helper function for determining whether target object is an array
     *
     * @param target the object under test
     * @return {Boolean} true if array, false otherwise
     */
    function isArray(target) {
        return Object.prototype.toString.apply(target) === '[object Array]';
    }

    /**
     * Helper function for determining whether target object is a function
     *
     * @param target the object under test
     * @return {Boolean} true if function, false otherwise
     */
    function isFunction(target) {
        return typeof target === 'function';
    }

    /**
     * Delegate to handle a media query being matched and unmatched.
     *
     * @param {object} options
     * @param {function} options.match callback for when the media query is matched
     * @param {function} [options.unmatch] callback for when the media query is unmatched
     * @param {function} [options.setup] one-time callback triggered the first time a query is matched
     * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
     * @constructor
     */
    function QueryHandler(options) {
        this.options = options;
        !options.deferSetup && this.setup();
    }
    QueryHandler.prototype = {

        /**
         * coordinates setup of the handler
         *
         * @function
         */
        setup : function() {
            if(this.options.setup) {
                this.options.setup();
            }
            this.initialised = true;
        },

        /**
         * coordinates setup and triggering of the handler
         *
         * @function
         */
        on : function() {
            !this.initialised && this.setup();
            this.options.match && this.options.match();
        },

        /**
         * coordinates the unmatch event for the handler
         *
         * @function
         */
        off : function() {
            this.options.unmatch && this.options.unmatch();
        },

        /**
         * called when a handler is to be destroyed.
         * delegates to the destroy or unmatch callbacks, depending on availability.
         *
         * @function
         */
        destroy : function() {
            this.options.destroy ? this.options.destroy() : this.off();
        },

        /**
         * determines equality by reference.
         * if object is supplied compare options, if function, compare match callback
         *
         * @function
         * @param {object || function} [target] the target for comparison
         */
        equals : function(target) {
            return this.options === target || this.options.match === target;
        }

    };
    /**
     * Represents a single media query, manages it's state and registered handlers for this query
     *
     * @constructor
     * @param {string} query the media query string
     * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
     */
    function MediaQuery(query, isUnconditional) {
        this.query = query;
        this.isUnconditional = isUnconditional;
        this.handlers = [];
        this.mql = matchMedia(query);

        var self = this;
        this.listener = function(mql) {
            self.mql = mql;
            self.assess();
        };
        this.mql.addListener(this.listener);
    }
    MediaQuery.prototype = {

        /**
         * add a handler for this query, triggering if already active
         *
         * @param {object} handler
         * @param {function} handler.match callback for when query is activated
         * @param {function} [handler.unmatch] callback for when query is deactivated
         * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
         * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
         */
        addHandler : function(handler) {
            var qh = new QueryHandler(handler);
            this.handlers.push(qh);

            this.matches() && qh.on();
        },

        /**
         * removes the given handler from the collection, and calls it's destroy methods
         * 
         * @param {object || function} handler the handler to remove
         */
        removeHandler : function(handler) {
            var handlers = this.handlers;
            each(handlers, function(h, i) {
                if(h.equals(handler)) {
                    h.destroy();
                    return !handlers.splice(i,1); //remove from array and exit each early
                }
            });
        },

        /**
         * Determine whether the media query should be considered a match
         * 
         * @return {Boolean} true if media query can be considered a match, false otherwise
         */
        matches : function() {
            return this.mql.matches || this.isUnconditional;
        },

        /**
         * Clears all handlers and unbinds events
         */
        clear : function() {
            each(this.handlers, function(handler) {
                handler.destroy();
            });
            this.mql.removeListener(this.listener);
            this.handlers.length = 0; //clear array
        },

        /*
         * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
         */
        assess : function() {
            var action = this.matches() ? 'on' : 'off';

            each(this.handlers, function(handler) {
                handler[action]();
            });
        }
    };
    /**
     * Allows for registration of query handlers.
     * Manages the query handler's state and is responsible for wiring up browser events
     *
     * @constructor
     */
    function MediaQueryDispatch () {
        if(!matchMedia) {
            throw new Error('matchMedia not present, legacy browsers require a polyfill');
        }

        this.queries = {};
        this.browserIsIncapable = !matchMedia('only all').matches;
    }

    MediaQueryDispatch.prototype = {

        /**
         * Registers a handler for the given media query
         *
         * @param {string} q the media query
         * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
         * @param {function} options.match fired when query matched
         * @param {function} [options.unmatch] fired when a query is no longer matched
         * @param {function} [options.setup] fired when handler first triggered
         * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
         * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
         */
        register : function(q, options, shouldDegrade) {
            var queries         = this.queries,
                isUnconditional = shouldDegrade && this.browserIsIncapable;

            if(!queries[q]) {
                queries[q] = new MediaQuery(q, isUnconditional);
            }

            //normalise to object in an array
            if(isFunction(options)) {
                options = { match : options };
            }
            if(!isArray(options)) {
                options = [options];
            }
            each(options, function(handler) {
                if (isFunction(handler)) {
                    handler = { match : handler };
                }
                queries[q].addHandler(handler);
            });

            return this;
        },

        /**
         * unregisters a query and all it's handlers, or a specific handler for a query
         *
         * @param {string} q the media query to target
         * @param {object || function} [handler] specific handler to unregister
         */
        unregister : function(q, handler) {
            var query = this.queries[q];

            if(query) {
                if(handler) {
                    query.removeHandler(handler);
                }
                else {
                    query.clear();
                    delete this.queries[q];
                }
            }

            return this;
        }
    };

	return new MediaQueryDispatch();

}));
},{}],3:[function(require,module,exports){
/*
Copyright © 2013 Adobe Systems Incorporated.

Licensed under the Apache License, Version 2.0 (the “License”);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an “AS IS” BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * See <a href="http://jquery.com">http://jquery.com</a>.
 * @name jquery
 * @class
 * See the jQuery Library  (<a href="http://jquery.com">http://jquery.com</a>) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 */

/**
 * See <a href="http://jquery.com">http://jquery.com</a>
 * @name fn
 * @class
 * See the jQuery Library  (<a href="http://jquery.com">http://jquery.com</a>) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 * @memberOf jquery
 */

/**
 * @fileOverview accessibleMegaMenu plugin
 *
 *<p>Licensed under the Apache License, Version 2.0 (the “License”)
 *<br />Copyright © 2013 Adobe Systems Incorporated.
 *<br />Project page <a href="https://github.com/adobe-accessibility/Accessible-Mega-Menu">https://github.com/adobe-accessibility/Accessible-Mega-Menu</a>
 * @version 0.1
 * @author Michael Jordan
 * @requires jquery
 */

/*jslint browser: true, devel: true, plusplus: true, nomen: true */
/*global jQuery */
(function ($, window, document) {
    "use strict";
    var pluginName = "accessibleMegaMenu",
        defaults = {
            uuidPrefix: "accessible-megamenu", // unique ID's are required to indicate aria-owns, aria-controls and aria-labelledby
            menuClass: "accessible-megamenu", // default css class used to define the megamenu styling
            topNavItemClass: "accessible-megamenu-top-nav-item", // default css class for a top-level navigation item in the megamenu
            panelClass: "accessible-megamenu-panel", // default css class for a megamenu panel
            panelGroupClass: "accessible-megamenu-panel-group", // default css class for a group of items within a megamenu panel
            hoverClass: "hover", // default css class for the hover state
            focusClass: "focus", // default css class for the focus state
            openClass: "open" // default css class for the open state
        },
        Keyboard = {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38,
            keyMap: {
                48: "0",
                49: "1",
                50: "2",
                51: "3",
                52: "4",
                53: "5",
                54: "6",
                55: "7",
                56: "8",
                57: "9",
                59: ";",
                65: "a",
                66: "b",
                67: "c",
                68: "d",
                69: "e",
                70: "f",
                71: "g",
                72: "h",
                73: "i",
                74: "j",
                75: "k",
                76: "l",
                77: "m",
                78: "n",
                79: "o",
                80: "p",
                81: "q",
                82: "r",
                83: "s",
                84: "t",
                85: "u",
                86: "v",
                87: "w",
                88: "x",
                89: "y",
                90: "z",
                96: "0",
                97: "1",
                98: "2",
                99: "3",
                100: "4",
                101: "5",
                102: "6",
                103: "7",
                104: "8",
                105: "9",
                190: "."
            }
        };
    /**
     * @desc Creates a new accessible mega menu instance.
     * @param {jquery} element
     * @param {object} [options] Mega Menu options
     * @param {string} [options.uuidPrefix=accessible-megamenu] - Prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby
     * @param {string} [options.menuClass=accessible-megamenu] - CSS class used to define the megamenu styling
     * @param {string} [options.topNavItemClass=accessible-megamenu-top-nav-item] - CSS class for a top-level navigation item in the megamenu
     * @param {string} [options.panelClass=accessible-megamenu-panel] - CSS class for a megamenu panel
     * @param {string} [options.panelGroupClass=accessible-megamenu-panel-group] - CSS class for a group of items within a megamenu panel
     * @param {string} [options.hoverClass=hover] - CSS class for the hover state
     * @param {string} [options.focusClass=focus] - CSS class for the focus state
     * @param {string} [options.openClass=open] - CSS class for the open state
     * @constructor
     */
    function AccessibleMegaMenu(element, options) {
        this.element = element;

        // merge optional settings and defaults into settings
        this.settings = $.extend({}, defaults, options);

        this._defaults = defaults;
        this._name = pluginName;

        this.mouseTimeoutID = null;
        this.focusTimeoutID = null;
        this.mouseFocused = false;
        this.justFocused = false;

        this.init();
    }

    AccessibleMegaMenu.prototype = (function () {

        /* private attributes and methods ------------------------ */
        var uuid = 0,
            keydownTimeoutDuration = 1000,
            keydownSearchString = "",
            isTouch = typeof window.hasOwnProperty === "function" && !!window.hasOwnProperty("ontouchstart"),
            _getPlugin,
            _addUniqueId,
            _togglePanel,
            _clickHandler,
            _clickOutsideHandler,
            _DOMAttrModifiedHandler,
            _focusInHandler,
            _focusOutHandler,
            _keyDownHandler,
            _mouseDownHandler,
            _mouseOverHandler,
            _mouseOutHandler,
            _toggleExpandedEventHandlers;

        /**
         * @name jQuery.fn.accessibleMegaMenu~_getPlugin
         * @desc Returns the parent accessibleMegaMenu instance for a given element
         * @param {jQuery} element
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _getPlugin = function (element) {
            return $(element).closest(':data(plugin_' + pluginName + ')').data("plugin_" + pluginName);
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_addUniqueId
         * @desc Adds a unique id and element.
         * The id string starts with the
         * string defined in settings.uuidPrefix.
         * @param {jQuery} element
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _addUniqueId = function (element) {
            element = $(element);
            var settings = this.settings;
            if (!element.attr("id")) {
                element.attr("id", settings.uuidPrefix + "-" + new Date().getTime() + "-" + (++uuid));
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_togglePanel
         * @desc Toggle the display of mega menu panels in response to an event.
         * The optional boolean value 'hide' forces all panels to hide.
         * @param {event} event
         * @param {Boolean} [hide] Hide all mega menu panels when true
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _togglePanel = function (event, hide) {
            var target = $(event.target),
                that = this,
                settings = this.settings,
                menu = this.menu,
                topli = target.closest('.' + settings.topNavItemClass),
                panel = target.hasClass(settings.panelClass) ? target : target.closest('.' + settings.panelClass),
                newfocus;

            _toggleExpandedEventHandlers.call(this, true);

            if (hide) {
                topli = menu.find('.' + settings.topNavItemClass + ' .' + settings.openClass + ':first').closest('.' + settings.topNavItemClass);
                if (!(topli.is(event.relatedTarget) || topli.has(event.relatedTarget).length > 0)) {
                    if ((event.type === 'mouseout' || event.type === 'focusout') && topli.has(document.activeElement).length > 0) {
                        return;
                    }
                    topli.find('[aria-expanded]')
                        .attr('aria-expanded', 'false')
                        .removeClass(settings.openClass)
                        .filter('.' + settings.panelClass)
                        .attr('aria-hidden', 'true');
                    if ((event.type === 'keydown' && event.keyCode === Keyboard.ESCAPE) || event.type === 'DOMAttrModified') {
                        newfocus = topli.find(':tabbable:first');
                        setTimeout(function () {
                            menu.find('[aria-expanded].' + that.settings.panelClass).off('DOMAttrModified.accessible-megamenu');
                            newfocus.focus();
                            that.justFocused = false;
                        }, 99);
                    }
                } else if (topli.length === 0) {
                    menu.find('[aria-expanded=true]')
                        .attr('aria-expanded', 'false')
                        .removeClass(settings.openClass)
                        .filter('.' + settings.panelClass)
                        .attr('aria-hidden', 'true');
                }
            } else {
                clearTimeout(that.focusTimeoutID);
                topli.siblings()
                    .find('[aria-expanded]')
                    .attr('aria-expanded', 'false')
                    .removeClass(settings.openClass)
                    .filter('.' + settings.panelClass)
                    .attr('aria-hidden', 'true');
                topli.find('[aria-expanded]')
                    .attr('aria-expanded', 'true')
                    .addClass(settings.openClass)
                    .filter('.' + settings.panelClass)
                    .attr('aria-hidden', 'false');
                if (event.type === 'mouseover' && target.is(':tabbable') && topli.length === 1 && panel.length === 0 && menu.has(document.activeElement).length > 0) {
                    target.focus();
                    that.justFocused = false;
                }

                _toggleExpandedEventHandlers.call(that);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_clickHandler
         * @desc Handle click event on mega menu item
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _clickHandler = function (event) {
            var target = $(event.currentTarget),
                topli = target.closest('.' + this.settings.topNavItemClass),
                panel = target.closest('.' + this.settings.panelClass);
            if (topli.length === 1
                    && panel.length === 0
                    && topli.find('.' + this.settings.panelClass).length === 1) {
                if (!target.hasClass(this.settings.openClass)) {
                    event.preventDefault();
                    event.stopPropagation();
                    _togglePanel.call(this, event);
                    this.justFocused = false;
                } else {
                    if (this.justFocused) {
                        event.preventDefault();
                        event.stopPropagation();
                        this.justFocused = false;
                    } else if (isTouch) {
                        event.preventDefault();
                        event.stopPropagation();
                        _togglePanel.call(this, event, target.hasClass(this.settings.openClass));
                    }
                }
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_clickOutsideHandler
         * @desc Handle click event outside of a the megamenu
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _clickOutsideHandler = function (event) {
            if ($(event.target).closest(this.menu).length === 0) {
                event.preventDefault();
                event.stopPropagation();
                _togglePanel.call(this, event, true);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_DOMAttrModifiedHandler
         * @desc Handle DOMAttrModified event on panel to respond to Windows 8 Narrator ExpandCollapse pattern
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _DOMAttrModifiedHandler = function (event) {
            if (event.originalEvent.attrName === 'aria-expanded'
                    && event.originalEvent.newValue === 'false'
                    && $(event.target).hasClass(this.settings.openClass)) {
                event.preventDefault();
                event.stopPropagation();
                _togglePanel.call(this, event, true);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_focusInHandler
         * @desc Handle focusin event on mega menu item.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _focusInHandler = function (event) {
            clearTimeout(this.focusTimeoutID);
            var target = $(event.target),
                panel = target.closest('.' + this.settings.panelClass);
            target
                .addClass(this.settings.focusClass)
                .on('click.accessible-megamenu', $.proxy(_clickHandler, this));
            this.justFocused = !this.mouseFocused;
            this.mouseFocused = false;
            if (this.panels.not(panel).filter('.' + this.settings.openClass).length) {
                _togglePanel.call(this, event);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_focusOutHandler
         * @desc Handle focusout event on mega menu item.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _focusOutHandler = function (event) {
            this.justFocused = false;
            var that = this,
                target = $(event.target),
                topli = target.closest('.' + this.settings.topNavItemClass),
                keepOpen = false;
            target
                .removeClass(this.settings.focusClass)
                .off('click.accessible-megamenu');

            if (window.cvox) {
                // If ChromeVox is running...
                that.focusTimeoutID = setTimeout(function () {
                    window.cvox.Api.getCurrentNode(function (node) {
                        if (topli.has(node).length) {
                            // and the current node being voiced is in
                            // the mega menu, clearTimeout,
                            // so the panel stays open.
                            clearTimeout(that.focusTimeoutID);
                        } else {
                            that.focusTimeoutID = setTimeout(function (scope, event, hide) {
                                _togglePanel.call(scope, event, hide);
                            }, 275, that, event, true);
                        }
                    });
                }, 25);
            } else {
                that.focusTimeoutID = setTimeout(function () {
                    _togglePanel.call(that, event, true);
                }, 300);
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_keyDownHandler
         * @desc Handle keydown event on mega menu.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _keyDownHandler = function (event) {
            var that = (this.constructor === AccessibleMegaMenu) ? this : _getPlugin(this), // determine the AccessibleMegaMenu plugin instance
                settings = that.settings,
                target = $($(this).is('.' + settings.hoverClass + ':tabbable') ? this : event.target), // if the element is hovered the target is this, otherwise, its the focused element
                menu = that.menu,
                topnavitems = that.topnavitems,
                topli = target.closest('.' + settings.topNavItemClass),
                tabbables = menu.find(':tabbable'),
                panel = target.hasClass(settings.panelClass) ? target : target.closest('.' + settings.panelClass),
                panelGroups = panel.find('.' + settings.panelGroupClass),
                currentPanelGroup = target.closest('.' + settings.panelGroupClass),
                next,
                keycode = event.keyCode || event.which,
                start,
                i,
                o,
                label,
                found = false,
                newString = Keyboard.keyMap[event.keyCode] || '',
                regex,
                isTopNavItem = (topli.length === 1 && panel.length === 0);

            if (target.is("input:focus, select:focus, textarea:focus, button:focus")) {
                // if the event target is a form element we should handle keydown normally
                return;
            }

            if (target.is('.' + settings.hoverClass + ':tabbable')) {
                $('html').off('keydown.accessible-megamenu');
            }

            switch (keycode) {
            case Keyboard.ESCAPE:
                _togglePanel.call(that, event, true);
                break;
            case Keyboard.DOWN:
                event.preventDefault();
                if (isTopNavItem) {
                    _togglePanel.call(that, event);
                    found = (topli.find('.' + settings.panelClass + ' :tabbable:first').focus().length === 1);
                } else {
                    found = (tabbables.filter(':gt(' + tabbables.index(target) + '):first').focus().length === 1);
                }

                if (!found && window.opera && opera.toString() === "[object Opera]" && (event.ctrlKey || event.metaKey)) {
                    tabbables = $(':tabbable');
                    i = tabbables.index(target);
                    found = ($(':tabbable:gt(' + $(':tabbable').index(target) + '):first').focus().length === 1);
                }
                break;
            case Keyboard.UP:
                event.preventDefault();
                if (isTopNavItem && target.hasClass(settings.openClass)) {
                    _togglePanel.call(that, event, true);
                    next = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last');
                    if (next.children('.' + settings.panelClass).length) {
                        found = (next.children()
                            .attr('aria-expanded', 'true')
                            .addClass(settings.openClass)
                            .filter('.' + settings.panelClass)
                            .attr('aria-hidden', 'false')
                            .find(':tabbable:last')
                            .focus() === 1);
                    }
                } else if (!isTopNavItem) {
                    found = (tabbables.filter(':lt(' + tabbables.index(target) + '):last').focus().length === 1);
                }

                if (!found && window.opera && opera.toString() === "[object Opera]" && (event.ctrlKey || event.metaKey)) {
                    tabbables = $(':tabbable');
                    i = tabbables.index(target);
                    found = ($(':tabbable:lt(' + $(':tabbable').index(target) + '):first').focus().length === 1);
                }
                break;
            case Keyboard.RIGHT:
                event.preventDefault();
                if (isTopNavItem) {
                    found = (topnavitems.filter(':gt(' + topnavitems.index(topli) + '):first').find(':tabbable:first').focus().length === 1);
                } else {
                    if (panelGroups.length && currentPanelGroup.length) {
                        // if the current panel contains panel groups, and we are able to focus the first tabbable element of the next panel group
                        found = (panelGroups.filter(':gt(' + panelGroups.index(currentPanelGroup) + '):first').find(':tabbable:first').focus().length === 1);
                    }

                    if (!found) {
                        found = (topli.find(':tabbable:first').focus().length === 1);
                    }
                }
                break;
            case Keyboard.LEFT:
                event.preventDefault();
                if (isTopNavItem) {
                    found = (topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last').find(':tabbable:first').focus().length === 1);
                } else {
                    if (panelGroups.length && currentPanelGroup.length) {
                        // if the current panel contains panel groups, and we are able to focus the first tabbable element of the previous panel group
                        found = (panelGroups.filter(':lt(' + panelGroups.index(currentPanelGroup) + '):last').find(':tabbable:first').focus().length === 1);
                    }

                    if (!found) {
                        found = (topli.find(':tabbable:first').focus().length === 1);
                    }
                }
                break;
            case Keyboard.TAB:
                i = tabbables.index(target);
                if (event.shiftKey && isTopNavItem && target.hasClass(settings.openClass)) {
                    _togglePanel.call(that, event, true);
                    next = topnavitems.filter(':lt(' + topnavitems.index(topli) + '):last');
                    if (next.children('.' + settings.panelClass).length) {
                        found = next.children()
                            .attr('aria-expanded', 'true')
                            .addClass(settings.openClass)
                            .filter('.' + settings.panelClass)
                            .attr('aria-hidden', 'false')
                            .find(':tabbable:last')
                            .focus();
                    }
                } else if (event.shiftKey && i > 0) {
                    found = (tabbables.filter(':lt(' + i + '):last').focus().length === 1);
                } else if (!event.shiftKey && i < tabbables.length - 1) {
                    found = (tabbables.filter(':gt(' + i + '):first').focus().length === 1);
                } else if (window.opera && opera.toString() === "[object Opera]") {
                    tabbables = $(':tabbable');
                    i = tabbables.index(target);
                    if (event.shiftKey) {
                        found = ($(':tabbable:lt(' + $(':tabbable').index(target) + '):last').focus().length === 1);
                    } else {
                        found = ($(':tabbable:gt(' + $(':tabbable').index(target) + '):first').focus().length === 1);
                    }
                }

                if (found) {
                    event.preventDefault();
                }
                break;
            case Keyboard.SPACE:
                if (isTopNavItem) {
                    event.preventDefault();
                    _clickHandler.call(that, event);
                } else {
                    return true;
                }
                break;
            case Keyboard.ENTER:
                return true;
                break;
            default:
                // alphanumeric filter
                clearTimeout(this.keydownTimeoutID);

                keydownSearchString += newString !== keydownSearchString ? newString : '';

                if (keydownSearchString.length === 0) {
                    return;
                }

                this.keydownTimeoutID = setTimeout(function () {
                    keydownSearchString = '';
                }, keydownTimeoutDuration);

                if (isTopNavItem && !target.hasClass(settings.openClass)) {
                    tabbables = tabbables.filter(':not(.' + settings.panelClass + ' :tabbable)');
                } else {
                    tabbables = topli.find(':tabbable');
                }

                if (event.shiftKey) {
                    tabbables = $(tabbables.get()
                        .reverse());
                }

                for (i = 0; i < tabbables.length; i++) {
                    o = tabbables.eq(i);
                    if (o.is(target)) {
                        start = (keydownSearchString.length === 1) ? i + 1 : i;
                        break;
                    }
                }

                regex = new RegExp('^' + keydownSearchString.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&'), 'i');

                for (i = start; i < tabbables.length; i++) {
                    o = tabbables.eq(i);
                    label = $.trim(o.text());
                    if (regex.test(label)) {
                        found = true;
                        o.focus();
                        break;
                    }
                }
                if (!found) {
                    for (i = 0; i < start; i++) {
                        o = tabbables.eq(i);
                        label = $.trim(o.text());
                        if (regex.test(label)) {
                            o.focus();
                            break;
                        }
                    }
                }
                break;
            }
            that.justFocused = false;
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_mouseDownHandler
         * @desc Handle mousedown event on mega menu.
         * @param {event} Event object
         * @memberof accessibleMegaMenu
         * @inner
         * @private
         */
        _mouseDownHandler = function (event) {
            if ($(event.target).is(this.settings.panelClass) || $(event.target).closest(":focusable").length) {
                this.mouseFocused = true;
            }
            this.mouseTimeoutID = setTimeout(function () {
                clearTimeout(this.focusTimeoutID);
            }, 1);
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_mouseOverHandler
         * @desc Handle mouseover event on mega menu.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _mouseOverHandler = function (event) {
            clearTimeout(this.mouseTimeoutID);
            $(event.target)
                .addClass(this.settings.hoverClass);
            _togglePanel.call(this, event);
            if ($(event.target).is(':tabbable')) {
                $('html').on('keydown.accessible-megamenu', $.proxy(_keyDownHandler, event.target));
            }
        };

        /**
         * @name jQuery.fn.accessibleMegaMenu~_mouseOutHandler
         * @desc Handle mouseout event on mega menu.
         * @param {event} Event object
         * @memberof jQuery.fn.accessibleMegaMenu
         * @inner
         * @private
         */
        _mouseOutHandler = function (event) {
            var that = this;
            $(event.target)
                .removeClass(that.settings.hoverClass);

            that.mouseTimeoutID = setTimeout(function () {
                _togglePanel.call(that, event, true);
            }, 250);
            if ($(event.target).is(':tabbable')) {
                $('html').off('keydown.accessible-megamenu');
            }
        };

        _toggleExpandedEventHandlers = function (hide) {
            var menu = this.menu;
            if (hide) {
                $('html').off('mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu');

                menu.find('[aria-expanded].' + this.settings.panelClass).off('DOMAttrModified.accessible-megamenu');
            } else {
                $('html').on('mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu', $.proxy(_clickOutsideHandler, this));

                /* Narrator in Windows 8 automatically toggles the aria-expanded property on double tap or click.
                   To respond to the change to collapse the panel, we must add a listener for a DOMAttrModified event. */
                menu.find('[aria-expanded=true].' + this.settings.panelClass).on('DOMAttrModified.accessible-megamenu', $.proxy(_DOMAttrModifiedHandler, this));
            }
        };

        /* public attributes and methods ------------------------- */
        return {
            constructor: AccessibleMegaMenu,

            /**
             * @lends jQuery.fn.accessibleMegaMenu
             * @desc Initializes an instance of the accessibleMegaMenu plugins
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            init: function () {
                var settings = this.settings,
                    nav = $(this.element),
                    menu = nav.children().first(),
                    topnavitems = menu.children();
                this.start(settings, nav, menu, topnavitems);
            },

            start: function(settings, nav, menu, topnavitems) {
                var that = this;
                this.settings = settings;
                this.menu = menu;
                this.topnavitems = topnavitems;

                nav.attr("role", "navigation");
                menu.addClass(settings.menuClass);
                topnavitems.each(function (i, topnavitem) {
                    var topnavitemlink, topnavitempanel;
                    topnavitem = $(topnavitem);
                    topnavitem.addClass(settings.topNavItemClass);
                    topnavitemlink = topnavitem.find(":tabbable:first");
                    topnavitempanel = topnavitem.children(":not(:tabbable):last");
                    _addUniqueId.call(that, topnavitemlink);
                    if (topnavitempanel.length) {
                        _addUniqueId.call(that, topnavitempanel);
                        topnavitemlink.attr({
                            "aria-haspopup": true,
                            "aria-controls": topnavitempanel.attr("id"),
                            "aria-expanded": false
                        });

                        topnavitempanel.attr({
                            "role": "group",
                            "aria-expanded": false,
                            "aria-hidden": true
                        })
                            .addClass(settings.panelClass)
                            .not("[aria-labelledby]")
                            .attr("aria-labelledby", topnavitemlink.attr("id"));
                    }
                });

                this.panels = menu.find("." + settings.panelClass);

                menu.on("focusin.accessible-megamenu", ":focusable, ." + settings.panelClass, $.proxy(_focusInHandler, this))
                    .on("focusout.accessible-megamenu", ":focusable, ." + settings.panelClass, $.proxy(_focusOutHandler, this))
                    .on("keydown.accessible-megamenu", $.proxy(_keyDownHandler, this))
                    .on("mouseover.accessible-megamenu", $.proxy(_mouseOverHandler, this))
                    .on("mouseout.accessible-megamenu", $.proxy(_mouseOutHandler, this))
                    .on("mousedown.accessible-megamenu", $.proxy(_mouseDownHandler, this));

                if (isTouch) {
                    menu.on("touchstart.accessible-megamenu",  $.proxy(_clickHandler, this));
                }

                menu.find("hr").attr("role", "separator");

                if ($(document.activeElement).closest(menu).length) {
                  $(document.activeElement).trigger("focusin.accessible-megamenu");
                }
            },

            /**
             * @desc Get default values
             * @example $(selector).accessibleMegaMenu("getDefaults");
             * @return {object}
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            getDefaults: function () {
                return this._defaults;
            },

            /**
             * @desc Get any option set to plugin using its name (as string)
             * @example $(selector).accessibleMegaMenu("getOption", some_option);
             * @param {string} opt
             * @return {string}
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            getOption: function (opt) {
                return this.settings[opt];
            },

            /**
             * @desc Get all options
             * @example $(selector).accessibleMegaMenu("getAllOptions");
             * @return {object}
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            getAllOptions: function () {
                return this.settings;
            },

            /**
             * @desc Set option
             * @example $(selector).accessibleMegaMenu("setOption", "option_name",  "option_value",  reinitialize);
             * @param {string} opt - Option name
             * @param {string} val - Option value
             * @param {boolean} [reinitialize] - boolean to re-initialize the menu.
             * @memberof jQuery.fn.accessibleMegaMenu
             * @instance
             */
            setOption: function (opt, value, reinitialize) {
                this.settings[opt] = value;
                if (reinitialize) {
                    this.init();
                }
            }
        };
    }());

    /* lightweight plugin wrapper around the constructor,
       to prevent against multiple instantiations */

    /**
     * @class accessibleMegaMenu
     * @memberOf jQuery.fn
     * @classdesc Implements an accessible mega menu as a jQuery plugin.
     * <p>The mega-menu It is modeled after the mega menu on {@link http://adobe.com|adobe.com} but has been simplified for use by others. A brief description of the interaction design choices can be found in a blog post at {@link http://blogs.adobe.com/accessibility/2013/05/adobe-com.html|Mega menu accessibility on adobe.com}.</p>
     * <h3>Keyboard Accessibility</h3>
     * <p>The accessible mega menu supports keyboard interaction modeled after the behavior described in the {@link http://www.w3.org/TR/wai-aria-practices/#menu|WAI-ARIA Menu or Menu bar (widget) design pattern}, however we also try to respect users' general expectations for the behavior of links in a global navigation. To this end, the accessible mega menu implementation permits tab focus on each of the six top-level menu items. When one of the menu items has focus, pressing the Enter key, Spacebar or Down arrow will open the submenu panel, and pressing the Left or Right arrow key will shift focus to the adjacent menu item. Links within the submenu panels are included in the tab order when the panel is open. They can also be navigated with the arrow keys or by typing the first character in the link name, which speeds up keyboard navigation considerably. Pressing the Escape key closes the submenu and restores focus to the parent menu item.</p>
     * <h3>Screen Reader Accessibility</h3>
     * <p>The accessible mega menu models its use of WAI-ARIA Roles, States, and Properties after those described in the {@link http://www.w3.org/TR/wai-aria-practices/#menu|WAI-ARIA Menu or Menu bar (widget) design pattern} with some notable exceptions, so that it behaves better with screen reader user expectations for global navigation. We don't use <code class="prettyprint prettyprinted" style=""><span class="pln">role</span><span class="pun">=</span><span class="str">"menu"</span></code> for the menu container and <code class="prettyprint prettyprinted" style=""><span class="pln">role</span><span class="pun">=</span><span class="str">"menuitem"</span></code> for each of the links therein, because if we do, assistive technology will no longer interpret the links as links, but instead, as menu items, and the links in our global navigation will no longer show up when a screen reader user executes a shortcut command to bring up a list of links in the page.</p>
     * @example <h4>HTML</h4><hr/>
&lt;nav&gt;
    &lt;ul class=&quot;nav-menu&quot;&gt;
        &lt;li class=&quot;nav-item&quot;&gt;
            &lt;a href=&quot;?movie&quot;&gt;Movies&lt;/a&gt;
            &lt;div class=&quot;sub-nav&quot;&gt;
                &lt;ul class=&quot;sub-nav-group&quot;&gt;
                    &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=0&quot;&gt;Action &amp;amp; Adventure&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=2&quot;&gt;Children &amp;amp; Family&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&amp;#8230;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;ul class=&quot;sub-nav-group&quot;&gt;
                    &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=7&quot;&gt;Dramas&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=9&quot;&gt;Foreign&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&amp;#8230;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;ul class=&quot;sub-nav-group&quot;&gt;
                    &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=14&quot;&gt;Musicals&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;?movie&amp;genre=15&quot;&gt;Romance&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&amp;#8230;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/li&gt;
        &lt;li class=&quot;nav-item&quot;&gt;
            &lt;a href=&quot;?tv&quot;&gt;TV Shows&lt;/a&gt;
            &lt;div class=&quot;sub-nav&quot;&gt;
                &lt;ul class=&quot;sub-nav-group&quot;&gt;
                    &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=20&quot;&gt;Classic TV&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=21&quot;&gt;Crime TV&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&amp;#8230;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;ul class=&quot;sub-nav-group&quot;&gt;
                    &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=27&quot;&gt;Reality TV&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=30&quot;&gt;TV Action&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&amp;#8230;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;ul class=&quot;sub-nav-group&quot;&gt;
                    &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=33&quot;&gt;TV Dramas&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;?tv&amp;genre=34&quot;&gt;TV Horror&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&amp;#8230;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/nav&gt;
     * @example <h4>CSS</h4><hr/>
&#47;* Rudimentary mega menu CSS for demonstration *&#47;

&#47;* mega menu list *&#47;
.nav-menu {
    display: block;
    position: relative;
    list-style: none;
    margin: 0;
    padding: 0;
    z-index: 15;
}

&#47;* a top level navigation item in the mega menu *&#47;
.nav-item {
    list-style: none;
    display: inline-block;
    padding: 0;
    margin: 0;
}

&#47;* first descendant link within a top level navigation item *&#47;
.nav-item &gt; a {
    position: relative;
    display: inline-block;
    padding: 0.5em 1em;
    margin: 0 0 -1px 0;
    border: 1px solid transparent;
}

&#47;* focus/open states of first descendant link within a top level
   navigation item *&#47;
.nav-item &gt; a:focus,
.nav-item &gt; a.open {
    border: 1px solid #dedede;
}

&#47;* open state of first descendant link within a top level
   navigation item *&#47;
.nav-item &gt; a.open {
    background-color: #fff;
    border-bottom: none;
    z-index: 1;
}

&#47;* sub-navigation panel *&#47;
.sub-nav {
    position: absolute;
    display: none;
    top: 2.2em;
    margin-top: -1px;
    padding: 0.5em 1em;
    border: 1px solid #dedede;
    background-color: #fff;
}

&#47;* sub-navigation panel open state *&#47;
.sub-nav.open {
    display: block;
}

&#47;* list of items within sub-navigation panel *&#47;
.sub-nav ul {
    display: inline-block;
    vertical-align: top;
    margin: 0 1em 0 0;
    padding: 0;
}

&#47;* list item within sub-navigation panel *&#47;
.sub-nav li {
    display: block;
    list-style-type: none;
    margin: 0;
    padding: 0;
}
     * @example <h4>JavaScript</h4><hr/>
&lt;!-- include jquery --&gt;
&lt;script src=&quot;http://code.jquery.com/jquery-1.10.1.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- include the jquery-accessibleMegaMenu plugin script --&gt;
&lt;script src=&quot;js/jquery-accessibleMegaMenu.js&quot;&gt;&lt;/script&gt;

&lt;!-- initialize a selector as an accessibleMegaMenu --&gt;
&lt;script&gt;
    $(&quot;nav:first&quot;).accessibleMegaMenu({
        &#47;* prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby *&#47;
        uuidPrefix: &quot;accessible-megamenu&quot;,

        &#47;* css class used to define the megamenu styling *&#47;
        menuClass: &quot;nav-menu&quot;,

        &#47;* css class for a top-level navigation item in the megamenu *&#47;
        topNavItemClass: &quot;nav-item&quot;,

        &#47;* css class for a megamenu panel *&#47;
        panelClass: &quot;sub-nav&quot;,

        &#47;* css class for a group of items within a megamenu panel *&#47;
        panelGroupClass: &quot;sub-nav-group&quot;,

        &#47;* css class for the hover state *&#47;
        hoverClass: &quot;hover&quot;,

        &#47;* css class for the focus state *&#47;
        focusClass: &quot;focus&quot;,

        &#47;* css class for the open state *&#47;
        openClass: &quot;open&quot;
    });
&lt;/script&gt;
     * @param {object} [options] Mega Menu options
     * @param {string} [options.uuidPrefix=accessible-megamenu] - Prefix for generated unique id attributes, which are required to indicate aria-owns, aria-controls and aria-labelledby
     * @param {string} [options.menuClass=accessible-megamenu] - CSS class used to define the megamenu styling
     * @param {string} [options.topNavItemClass=accessible-megamenu-top-nav-item] - CSS class for a top-level navigation item in the megamenu
     * @param {string} [options.panelClass=accessible-megamenu-panel] - CSS class for a megamenu panel
     * @param {string} [options.panelGroupClass=accessible-megamenu-panel-group] - CSS class for a group of items within a megamenu panel
     * @param {string} [options.hoverClass=hover] - CSS class for the hover state
     * @param {string} [options.focusClass=focus] - CSS class for the focus state
     * @param {string} [options.openClass=open] - CSS class for the open state
     */
    $.fn[pluginName] = function (options) {
        return this.each(function () {
            if (!$.data(this, "plugin_" + pluginName)) {
                $.data(this, "plugin_" + pluginName, new $.fn[pluginName].AccessibleMegaMenu(this, options));
            }
        });
    };

    $.fn[pluginName].AccessibleMegaMenu = AccessibleMegaMenu;

    /* :focusable and :tabbable selectors from
       https://raw.github.com/jquery/jquery-ui/master/ui/jquery.ui.core.js */

    /**
     * @private
     */
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {
            return $.css(this, "visibility") === "hidden";
        }).length;
    }

    /**
     * @private
     */
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img,
            nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false;
            }
            img = $("img[usemap=#" + mapName + "]")[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled :
                "a" === nodeName ?
                        element.href || isTabIndexNotNaN :
                        isTabIndexNotNaN) &&
                            // the element and all of its ancestors must be visible
                            visible(element);
    }

    $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {
            return function (elem) {
                return !!$.data(elem, dataName);
            };
        }) : // support: jQuery <1.8
                function (elem, i, match) {
                    return !!$.data(elem, match[3]);
                },

        focusable: function (element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },

        tabbable: function (element) {
            var tabIndex = $.attr(element, "tabindex"),
                isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    });
}(jQuery, window, document));

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvbWFpbi5qcyIsImJvd2VyX2NvbXBvbmVudHMvZW5xdWlyZS9kaXN0L2VucXVpcmUuanMiLCJib3dlcl9jb21wb25lbnRzL2pxdWVyeS1hY2Nlc3NpYmxlTWVnYU1lbnUvanMvanF1ZXJ5LWFjY2Vzc2libGVNZWdhTWVudS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiBnbG9iYWxzIGpRdWVyeSAqL1xuXG52YXIgZW5xdWlyZSA9IHJlcXVpcmUoJy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvZW5xdWlyZS9kaXN0L2VucXVpcmUuanMnKVxucmVxdWlyZSgnLi4vLi4vYm93ZXJfY29tcG9uZW50cy9qcXVlcnktYWNjZXNzaWJsZU1lZ2FNZW51L2pzL2pxdWVyeS1hY2Nlc3NpYmxlTWVnYU1lbnUuanMnKVxuXG4ndXNlIHN0cmljdCdcblxualF1ZXJ5KGZ1bmN0aW9uICgkKSB7XG4gICQoJy5lbWFpbF9idXR0b24nKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgIHZhciBjb25maXJtXG4gICAgaWYgKCFjb25maXJtKCdBcmUgeW91IHN1cmU/JykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIGFjdGlvbjogJ3NlbmRfZW1haWwnLFxuICAgICAgdGFyZ2V0OiAkKGUudGFyZ2V0KS5hdHRyKCdpZCcpLFxuICAgICAgc3ViamVjdDogJChlLnRhcmdldCkuZGF0YSgnc3ViamVjdCcpLFxuICAgICAgYm9keTogJCgkKGUudGFyZ2V0KS5kYXRhKCdib2R5JykpLnZhbCgpXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGRhdGEpXG4gICAgJCgnLmVtYWlsX3Jlc3VsdHMnKS5yZW1vdmVDbGFzcygnYWxlcnQtZGFuZ2VyJylcbiAgICAkLnBvc3QoJy93cC1hZG1pbi9hZG1pbi1hamF4LnBocCcsIGRhdGEsIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIHhocikge1xuICAgICAgJCgnLmVtYWlsX3Jlc3VsdHMnKS5odG1sKGRhdGEpXG4gICAgICBpZiAoc3RhdHVzICE9PSAnc3VjY2VzcycpIHtcbiAgICAgICAgJCgnLmVtYWlsX3Jlc3VsdHMnKS5hZGRDbGFzcygnYWxlcnQtZGFuZ2VyJylcbiAgICAgIH1cbiAgICAgICQoJy5lbWFpbF9yZXN1bHRzJykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpXG4gICAgfSlcbiAgfSlcbn0pXG5cbmpRdWVyeShmdW5jdGlvbiAoJCkge1xuICBlbnF1aXJlLnJlZ2lzdGVyKCdzY3JlZW4gYW5kIChtaW4td2lkdGg6Nzc5cHgpJywge1xuICAgIG1hdGNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBNYWluIE5hdlxuICAgICAgJCgnLm1lbnUtaGVhZGVyLW1lbnUtY29udGFpbmVyJykuYWNjZXNzaWJsZU1lZ2FNZW51KHtcbiAgICAgICAgdXVpZFByZWZpeDogJ2FjY2Vzc2libGUtbmF2JyxcbiAgICAgICAgbWVudUNsYXNzOiAnbmF2LW1lbnUnLFxuICAgICAgICB0b3BOYXZJdGVtQ2xhc3M6ICduYXYtaXRlbScsXG4gICAgICAgIHBhbmVsQ2xhc3M6ICdzdWItbmF2JyxcbiAgICAgICAgcGFuZWxHcm91cENsYXNzOiAnc3ViLW5hdi1ncm91cCcsXG4gICAgICAgIGhvdmVyQ2xhc3M6ICdob3ZlcicsXG4gICAgICAgIGZvY3VzQ2xhc3M6ICdmb2N1cycsXG4gICAgICAgIG9wZW5DbGFzczogJ29wZW4nXG4gICAgICB9KVxuICAgICAgLy8gaGFjayBzbyB0aGF0IHRoZSBtZWdhbWVudSBkb2Vzbid0IHNob3cgZmxhc2ggb2YgY3NzIGFuaW1hdGlvbiBhZnRlciB0aGUgcGFnZSBsb2Fkcy5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2luaXQnKVxuICAgICAgfSwgNTAwKVxuICAgICAgLy8gQ2hhbmdlIGFyaWEtaGlkZGVuIHN0YXRlXG4gICAgICAkKCcjanMtbWFpbi1uYXZpZ2F0aW9uLXRvZ2dsZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgIH0sXG4gICAgdW5tYXRjaDogZnVuY3Rpb24gKCkge1xuICAgIH1cbiAgfSlcbn0pXG5cbi8vIENoYW5nZSBhcmlhLWhpZGRlbiBzdGF0ZVxualF1ZXJ5KGZ1bmN0aW9uICgkKSB7XG4gIGVucXVpcmUucmVnaXN0ZXIoJ3NjcmVlbiBhbmQgKG1heC13aWR0aDo3NzlweCknLCB7XG4gICAgbWF0Y2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoJyNqcy1tYWluLW5hdmlnYXRpb24tdG9nZ2xlJykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKVxuICAgICAgJCgnLnN1Yi1uYXYnKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpXG4gICAgfSxcbiAgICB1bm1hdGNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKCcjanMtbWFpbi1uYXZpZ2F0aW9uLXRvZ2dsZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgJCgnLnN1Yi1uYXYnKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICB9XG4gIH0pXG59KVxuXG5qUXVlcnkoZnVuY3Rpb24gKCQpIHtcbiAgLy8gRXh0ZW5kIGpRdWVyeSB0byBtYWtlIGEgdG9nZ2xlIHRleHQgZnVuY3Rpb24uXG4gIGpRdWVyeS5mbi5leHRlbmQoe1xuICAgIHRvZ2dsZVRleHQ6IGZ1bmN0aW9uIChzdGF0ZU9uZSwgc3RhdGVUd28pIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBzdGF0ZVR3byA9IHN0YXRlVHdvIHx8ICcnXG4gICAgICAgICQodGhpcykudGV4dCgpICE9PSBzdGF0ZVR3byAmJiBzdGF0ZU9uZSA/ICQodGhpcykudGV4dChzdGF0ZVR3bykgOiAkKHRoaXMpLnRleHQoc3RhdGVPbmUpXG4gICAgICB9KVxuICAgIH1cbiAgfSlcbn0pXG5cbi8vIFRvZ2dsZSBuYXZpZ2F0aW9uXG5qUXVlcnkoZnVuY3Rpb24gKCQpIHtcbiAgJCgnI2pzLW1haW4tbmF2aWdhdGlvbi10b2dnbGUnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzKS50b2dnbGVUZXh0KCdDbG9zZScsICdNZW51JylcbiAgICAkKCcjanMtbWFpbi1uYXZpZ2F0aW9uJykudG9nZ2xlQ2xhc3MoJ29wZW4nKVxuICB9KVxufSlcblxuLy8gU2VhcmNoIGZvcm1cbmpRdWVyeShmdW5jdGlvbiAoJCkge1xuICAkKCcuc2VhcmNoLWZvcm0gaW5wdXRbbmFtZT1wb3N0X3R5cGVdJykuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAkKCdmb3JtI3NlYXJjaGZvcm0nKS5zdWJtaXQoKVxuICB9KVxufSlcblxuLy8gQWRkIHNlbGVjdGVkIGNsYXNzIGFuZCBhcmlhIHJvbGVzIHRvIGNoZWNrZWQgaW5wdXQgbGFiZWxzXG5qUXVlcnkoZnVuY3Rpb24gKCQpIHtcbiAgJCgnaW5wdXRbdHlwZT1yYWRpb10saW5wdXRbdHlwZT1jaGVja2JveF0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAkKCdpbnB1dFt0eXBlPXJhZGlvXSxpbnB1dFt0eXBlPWNoZWNrYm94XScpLmF0dHIoJ2FyaWEtY2hlY2tlZCcsICdmYWxzZScpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdjaGVja2VkJylcbiAgICAkKCdpbnB1dFt0eXBlPXJhZGlvXTpjaGVja2VkLGlucHV0W3R5cGU9Y2hlY2tib3hdOmNoZWNrZWQnKS5hdHRyKCdhcmlhLWNoZWNrZWQnLCAndHJ1ZScpLnBhcmVudCgpLmFkZENsYXNzKCdjaGVja2VkJylcbiAgfSlcbn0pXG4iLCIvKiFcbiAqIGVucXVpcmUuanMgdjIuMS4yIC0gQXdlc29tZSBNZWRpYSBRdWVyaWVzIGluIEphdmFTY3JpcHRcbiAqIENvcHlyaWdodCAoYykgMjAxNCBOaWNrIFdpbGxpYW1zIC0gaHR0cDovL3dpY2t5Lm5pbGxpYS5tcy9lbnF1aXJlLmpzXG4gKiBMaWNlbnNlOiBNSVQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICovXG5cbjsoZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGZhY3RvcnkpIHtcblx0dmFyIG1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYTtcblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkobWF0Y2hNZWRpYSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIChjb250ZXh0W25hbWVdID0gZmFjdG9yeShtYXRjaE1lZGlhKSk7XG5cdFx0fSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Y29udGV4dFtuYW1lXSA9IGZhY3RvcnkobWF0Y2hNZWRpYSk7XG5cdH1cbn0oJ2VucXVpcmUnLCB0aGlzLCBmdW5jdGlvbiAobWF0Y2hNZWRpYSkge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuICAgIC8qanNoaW50IHVudXNlZDpmYWxzZSAqL1xuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgaXRlcmF0aW5nIG92ZXIgYSBjb2xsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvblxuICAgICAqIEBwYXJhbSBmblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVhY2goY29sbGVjdGlvbiwgZm4pIHtcbiAgICAgICAgdmFyIGkgICAgICA9IDAsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGNvbnQ7XG5cbiAgICAgICAgZm9yKGk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29udCA9IGZuKGNvbGxlY3Rpb25baV0sIGkpO1xuICAgICAgICAgICAgaWYoY29udCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBicmVhazsgLy9hbGxvdyBlYXJseSBleGl0XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdGFyZ2V0IG9iamVjdCBpcyBhbiBhcnJheVxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCB0aGUgb2JqZWN0IHVuZGVyIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGFycmF5LCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5KHRhcmdldCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh0YXJnZXQpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0YXJnZXQgb2JqZWN0IGlzIGEgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXQgdGhlIG9iamVjdCB1bmRlciB0ZXN0XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBmdW5jdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZWdhdGUgdG8gaGFuZGxlIGEgbWVkaWEgcXVlcnkgYmVpbmcgbWF0Y2hlZCBhbmQgdW5tYXRjaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLm1hdGNoIGNhbGxiYWNrIGZvciB3aGVuIHRoZSBtZWRpYSBxdWVyeSBpcyBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMudW5tYXRjaF0gY2FsbGJhY2sgZm9yIHdoZW4gdGhlIG1lZGlhIHF1ZXJ5IGlzIHVubWF0Y2hlZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLnNldHVwXSBvbmUtdGltZSBjYWxsYmFjayB0cmlnZ2VyZWQgdGhlIGZpcnN0IHRpbWUgYSBxdWVyeSBpcyBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZlclNldHVwPWZhbHNlXSBzaG91bGQgdGhlIHNldHVwIGNhbGxiYWNrIGJlIHJ1biBpbW1lZGlhdGVseSwgcmF0aGVyIHRoYW4gZmlyc3QgdGltZSBxdWVyeSBpcyBtYXRjaGVkP1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFF1ZXJ5SGFuZGxlcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICFvcHRpb25zLmRlZmVyU2V0dXAgJiYgdGhpcy5zZXR1cCgpO1xuICAgIH1cbiAgICBRdWVyeUhhbmRsZXIucHJvdG90eXBlID0ge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb29yZGluYXRlcyBzZXR1cCBvZiB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIHNldHVwIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc2V0dXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0dXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb29yZGluYXRlcyBzZXR1cCBhbmQgdHJpZ2dlcmluZyBvZiB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIG9uIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAhdGhpcy5pbml0aWFsaXNlZCAmJiB0aGlzLnNldHVwKCk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubWF0Y2ggJiYgdGhpcy5vcHRpb25zLm1hdGNoKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvb3JkaW5hdGVzIHRoZSB1bm1hdGNoIGV2ZW50IGZvciB0aGUgaGFuZGxlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIG9mZiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVubWF0Y2ggJiYgdGhpcy5vcHRpb25zLnVubWF0Y2goKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gYSBoYW5kbGVyIGlzIHRvIGJlIGRlc3Ryb3llZC5cbiAgICAgICAgICogZGVsZWdhdGVzIHRvIHRoZSBkZXN0cm95IG9yIHVubWF0Y2ggY2FsbGJhY2tzLCBkZXBlbmRpbmcgb24gYXZhaWxhYmlsaXR5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3kgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kZXN0cm95ID8gdGhpcy5vcHRpb25zLmRlc3Ryb3koKSA6IHRoaXMub2ZmKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgZXF1YWxpdHkgYnkgcmVmZXJlbmNlLlxuICAgICAgICAgKiBpZiBvYmplY3QgaXMgc3VwcGxpZWQgY29tcGFyZSBvcHRpb25zLCBpZiBmdW5jdGlvbiwgY29tcGFyZSBtYXRjaCBjYWxsYmFja1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3QgfHwgZnVuY3Rpb259IFt0YXJnZXRdIHRoZSB0YXJnZXQgZm9yIGNvbXBhcmlzb25cbiAgICAgICAgICovXG4gICAgICAgIGVxdWFscyA6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucyA9PT0gdGFyZ2V0IHx8IHRoaXMub3B0aW9ucy5tYXRjaCA9PT0gdGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBzaW5nbGUgbWVkaWEgcXVlcnksIG1hbmFnZXMgaXQncyBzdGF0ZSBhbmQgcmVnaXN0ZXJlZCBoYW5kbGVycyBmb3IgdGhpcyBxdWVyeVxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IHRoZSBtZWRpYSBxdWVyeSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1VuY29uZGl0aW9uYWw9ZmFsc2VdIHdoZXRoZXIgdGhlIG1lZGlhIHF1ZXJ5IHNob3VsZCBydW4gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBjb25kaXRpb25zIGFyZSBtZXQuIFByaW1hcmlseSBmb3IgaGVscGluZyBvbGRlciBicm93c2VycyBkZWFsIHdpdGggbW9iaWxlLWZpcnN0IGRlc2lnblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1lZGlhUXVlcnkocXVlcnksIGlzVW5jb25kaXRpb25hbCkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHRoaXMuaXNVbmNvbmRpdGlvbmFsID0gaXNVbmNvbmRpdGlvbmFsO1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMubXFsID0gbWF0Y2hNZWRpYShxdWVyeSk7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24obXFsKSB7XG4gICAgICAgICAgICBzZWxmLm1xbCA9IG1xbDtcbiAgICAgICAgICAgIHNlbGYuYXNzZXNzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubXFsLmFkZExpc3RlbmVyKHRoaXMubGlzdGVuZXIpO1xuICAgIH1cbiAgICBNZWRpYVF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWRkIGEgaGFuZGxlciBmb3IgdGhpcyBxdWVyeSwgdHJpZ2dlcmluZyBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlclxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyLm1hdGNoIGNhbGxiYWNrIGZvciB3aGVuIHF1ZXJ5IGlzIGFjdGl2YXRlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbaGFuZGxlci51bm1hdGNoXSBjYWxsYmFjayBmb3Igd2hlbiBxdWVyeSBpcyBkZWFjdGl2YXRlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbaGFuZGxlci5zZXR1cF0gY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSBleGVjdXRpb24gd2hlbiBhIHF1ZXJ5IGhhbmRsZXIgaXMgcmVnaXN0ZXJlZFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtoYW5kbGVyLmRlZmVyU2V0dXA9ZmFsc2VdIHNob3VsZCB0aGUgc2V0dXAgY2FsbGJhY2sgYmUgZGVmZXJyZWQgdW50aWwgdGhlIGZpcnN0IHRpbWUgdGhlIGhhbmRsZXIgaXMgbWF0Y2hlZD9cbiAgICAgICAgICovXG4gICAgICAgIGFkZEhhbmRsZXIgOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgcWggPSBuZXcgUXVlcnlIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5wdXNoKHFoKTtcblxuICAgICAgICAgICAgdGhpcy5tYXRjaGVzKCkgJiYgcWgub24oKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVtb3ZlcyB0aGUgZ2l2ZW4gaGFuZGxlciBmcm9tIHRoZSBjb2xsZWN0aW9uLCBhbmQgY2FsbHMgaXQncyBkZXN0cm95IG1ldGhvZHNcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0IHx8IGZ1bmN0aW9ufSBoYW5kbGVyIHRoZSBoYW5kbGVyIHRvIHJlbW92ZVxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlSGFuZGxlciA6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgICAgICBlYWNoKGhhbmRsZXJzLCBmdW5jdGlvbihoLCBpKSB7XG4gICAgICAgICAgICAgICAgaWYoaC5lcXVhbHMoaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaGFuZGxlcnMuc3BsaWNlKGksMSk7IC8vcmVtb3ZlIGZyb20gYXJyYXkgYW5kIGV4aXQgZWFjaCBlYXJseVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgbWVkaWEgcXVlcnkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBtYXRjaFxuICAgICAgICAgKiBcbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBtZWRpYSBxdWVyeSBjYW4gYmUgY29uc2lkZXJlZCBhIG1hdGNoLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgICAgICovXG4gICAgICAgIG1hdGNoZXMgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1xbC5tYXRjaGVzIHx8IHRoaXMuaXNVbmNvbmRpdGlvbmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGVhcnMgYWxsIGhhbmRsZXJzIGFuZCB1bmJpbmRzIGV2ZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXIgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1xbC5yZW1vdmVMaXN0ZW5lcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMubGVuZ3RoID0gMDsgLy9jbGVhciBhcnJheVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIEFzc2Vzc2VzIHRoZSBxdWVyeSwgdHVybmluZyBvbiBhbGwgaGFuZGxlcnMgaWYgaXQgbWF0Y2hlcywgdHVybmluZyB0aGVtIG9mZiBpZiBpdCBkb2Vzbid0IG1hdGNoXG4gICAgICAgICAqL1xuICAgICAgICBhc3Nlc3MgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb24gPSB0aGlzLm1hdGNoZXMoKSA/ICdvbicgOiAnb2ZmJztcblxuICAgICAgICAgICAgZWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlclthY3Rpb25dKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3dzIGZvciByZWdpc3RyYXRpb24gb2YgcXVlcnkgaGFuZGxlcnMuXG4gICAgICogTWFuYWdlcyB0aGUgcXVlcnkgaGFuZGxlcidzIHN0YXRlIGFuZCBpcyByZXNwb25zaWJsZSBmb3Igd2lyaW5nIHVwIGJyb3dzZXIgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNZWRpYVF1ZXJ5RGlzcGF0Y2ggKCkge1xuICAgICAgICBpZighbWF0Y2hNZWRpYSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXRjaE1lZGlhIG5vdCBwcmVzZW50LCBsZWdhY3kgYnJvd3NlcnMgcmVxdWlyZSBhIHBvbHlmaWxsJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5icm93c2VySXNJbmNhcGFibGUgPSAhbWF0Y2hNZWRpYSgnb25seSBhbGwnKS5tYXRjaGVzO1xuICAgIH1cblxuICAgIE1lZGlhUXVlcnlEaXNwYXRjaC5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiBtZWRpYSBxdWVyeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcSB0aGUgbWVkaWEgcXVlcnlcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3QgfHwgQXJyYXkgfHwgRnVuY3Rpb259IG9wdGlvbnMgZWl0aGVyIGEgc2luZ2xlIHF1ZXJ5IGhhbmRsZXIgb2JqZWN0LCBhIGZ1bmN0aW9uLCBvciBhbiBhcnJheSBvZiBxdWVyeSBoYW5kbGVyc1xuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLm1hdGNoIGZpcmVkIHdoZW4gcXVlcnkgbWF0Y2hlZFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy51bm1hdGNoXSBmaXJlZCB3aGVuIGEgcXVlcnkgaXMgbm8gbG9uZ2VyIG1hdGNoZWRcbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMuc2V0dXBdIGZpcmVkIHdoZW4gaGFuZGxlciBmaXJzdCB0cmlnZ2VyZWRcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZlclNldHVwPWZhbHNlXSB3aGV0aGVyIHNldHVwIHNob3VsZCBiZSBydW4gaW1tZWRpYXRlbHkgb3IgZGVmZXJyZWQgdW50aWwgcXVlcnkgaXMgZmlyc3QgbWF0Y2hlZFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG91bGREZWdyYWRlPWZhbHNlXSB3aGV0aGVyIHRoaXMgcGFydGljdWxhciBtZWRpYSBxdWVyeSBzaG91bGQgYWx3YXlzIHJ1biBvbiBpbmNhcGFibGUgYnJvd3NlcnNcbiAgICAgICAgICovXG4gICAgICAgIHJlZ2lzdGVyIDogZnVuY3Rpb24ocSwgb3B0aW9ucywgc2hvdWxkRGVncmFkZSkge1xuICAgICAgICAgICAgdmFyIHF1ZXJpZXMgICAgICAgICA9IHRoaXMucXVlcmllcyxcbiAgICAgICAgICAgICAgICBpc1VuY29uZGl0aW9uYWwgPSBzaG91bGREZWdyYWRlICYmIHRoaXMuYnJvd3NlcklzSW5jYXBhYmxlO1xuXG4gICAgICAgICAgICBpZighcXVlcmllc1txXSkge1xuICAgICAgICAgICAgICAgIHF1ZXJpZXNbcV0gPSBuZXcgTWVkaWFRdWVyeShxLCBpc1VuY29uZGl0aW9uYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL25vcm1hbGlzZSB0byBvYmplY3QgaW4gYW4gYXJyYXlcbiAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0geyBtYXRjaCA6IG9wdGlvbnMgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFpc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IFtvcHRpb25zXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVhY2gob3B0aW9ucywgZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB7IG1hdGNoIDogaGFuZGxlciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBxdWVyaWVzW3FdLmFkZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVucmVnaXN0ZXJzIGEgcXVlcnkgYW5kIGFsbCBpdCdzIGhhbmRsZXJzLCBvciBhIHNwZWNpZmljIGhhbmRsZXIgZm9yIGEgcXVlcnlcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHEgdGhlIG1lZGlhIHF1ZXJ5IHRvIHRhcmdldFxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdCB8fCBmdW5jdGlvbn0gW2hhbmRsZXJdIHNwZWNpZmljIGhhbmRsZXIgdG8gdW5yZWdpc3RlclxuICAgICAgICAgKi9cbiAgICAgICAgdW5yZWdpc3RlciA6IGZ1bmN0aW9uKHEsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1txXTtcblxuICAgICAgICAgICAgaWYocXVlcnkpIHtcbiAgICAgICAgICAgICAgICBpZihoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnJlbW92ZUhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeS5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5xdWVyaWVzW3FdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cdHJldHVybiBuZXcgTWVkaWFRdWVyeURpc3BhdGNoKCk7XG5cbn0pKTsiLCIvKlxuQ29weXJpZ2h0IMKpIDIwMTMgQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSDigJxMaWNlbnNl4oCdKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4g4oCcQVMgSVPigJ0gQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBTZWUgPGEgaHJlZj1cImh0dHA6Ly9qcXVlcnkuY29tXCI+aHR0cDovL2pxdWVyeS5jb208L2E+LlxuICogQG5hbWUganF1ZXJ5XG4gKiBAY2xhc3NcbiAqIFNlZSB0aGUgalF1ZXJ5IExpYnJhcnkgICg8YSBocmVmPVwiaHR0cDovL2pxdWVyeS5jb21cIj5odHRwOi8vanF1ZXJ5LmNvbTwvYT4pIGZvciBmdWxsIGRldGFpbHMuICBUaGlzIGp1c3RcbiAqIGRvY3VtZW50cyB0aGUgZnVuY3Rpb24gYW5kIGNsYXNzZXMgdGhhdCBhcmUgYWRkZWQgdG8galF1ZXJ5IGJ5IHRoaXMgcGx1Zy1pbi5cbiAqL1xuXG4vKipcbiAqIFNlZSA8YSBocmVmPVwiaHR0cDovL2pxdWVyeS5jb21cIj5odHRwOi8vanF1ZXJ5LmNvbTwvYT5cbiAqIEBuYW1lIGZuXG4gKiBAY2xhc3NcbiAqIFNlZSB0aGUgalF1ZXJ5IExpYnJhcnkgICg8YSBocmVmPVwiaHR0cDovL2pxdWVyeS5jb21cIj5odHRwOi8vanF1ZXJ5LmNvbTwvYT4pIGZvciBmdWxsIGRldGFpbHMuICBUaGlzIGp1c3RcbiAqIGRvY3VtZW50cyB0aGUgZnVuY3Rpb24gYW5kIGNsYXNzZXMgdGhhdCBhcmUgYWRkZWQgdG8galF1ZXJ5IGJ5IHRoaXMgcGx1Zy1pbi5cbiAqIEBtZW1iZXJPZiBqcXVlcnlcbiAqL1xuXG4vKipcbiAqIEBmaWxlT3ZlcnZpZXcgYWNjZXNzaWJsZU1lZ2FNZW51IHBsdWdpblxuICpcbiAqPHA+TGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIOKAnExpY2Vuc2XigJ0pXG4gKjxiciAvPkNvcHlyaWdodCDCqSAyMDEzIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkLlxuICo8YnIgLz5Qcm9qZWN0IHBhZ2UgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS1hY2Nlc3NpYmlsaXR5L0FjY2Vzc2libGUtTWVnYS1NZW51XCI+aHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlLWFjY2Vzc2liaWxpdHkvQWNjZXNzaWJsZS1NZWdhLU1lbnU8L2E+XG4gKiBAdmVyc2lvbiAwLjFcbiAqIEBhdXRob3IgTWljaGFlbCBKb3JkYW5cbiAqIEByZXF1aXJlcyBqcXVlcnlcbiAqL1xuXG4vKmpzbGludCBicm93c2VyOiB0cnVlLCBkZXZlbDogdHJ1ZSwgcGx1c3BsdXM6IHRydWUsIG5vbWVuOiB0cnVlICovXG4vKmdsb2JhbCBqUXVlcnkgKi9cbihmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBwbHVnaW5OYW1lID0gXCJhY2Nlc3NpYmxlTWVnYU1lbnVcIixcbiAgICAgICAgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICB1dWlkUHJlZml4OiBcImFjY2Vzc2libGUtbWVnYW1lbnVcIiwgLy8gdW5pcXVlIElEJ3MgYXJlIHJlcXVpcmVkIHRvIGluZGljYXRlIGFyaWEtb3ducywgYXJpYS1jb250cm9scyBhbmQgYXJpYS1sYWJlbGxlZGJ5XG4gICAgICAgICAgICBtZW51Q2xhc3M6IFwiYWNjZXNzaWJsZS1tZWdhbWVudVwiLCAvLyBkZWZhdWx0IGNzcyBjbGFzcyB1c2VkIHRvIGRlZmluZSB0aGUgbWVnYW1lbnUgc3R5bGluZ1xuICAgICAgICAgICAgdG9wTmF2SXRlbUNsYXNzOiBcImFjY2Vzc2libGUtbWVnYW1lbnUtdG9wLW5hdi1pdGVtXCIsIC8vIGRlZmF1bHQgY3NzIGNsYXNzIGZvciBhIHRvcC1sZXZlbCBuYXZpZ2F0aW9uIGl0ZW0gaW4gdGhlIG1lZ2FtZW51XG4gICAgICAgICAgICBwYW5lbENsYXNzOiBcImFjY2Vzc2libGUtbWVnYW1lbnUtcGFuZWxcIiwgLy8gZGVmYXVsdCBjc3MgY2xhc3MgZm9yIGEgbWVnYW1lbnUgcGFuZWxcbiAgICAgICAgICAgIHBhbmVsR3JvdXBDbGFzczogXCJhY2Nlc3NpYmxlLW1lZ2FtZW51LXBhbmVsLWdyb3VwXCIsIC8vIGRlZmF1bHQgY3NzIGNsYXNzIGZvciBhIGdyb3VwIG9mIGl0ZW1zIHdpdGhpbiBhIG1lZ2FtZW51IHBhbmVsXG4gICAgICAgICAgICBob3ZlckNsYXNzOiBcImhvdmVyXCIsIC8vIGRlZmF1bHQgY3NzIGNsYXNzIGZvciB0aGUgaG92ZXIgc3RhdGVcbiAgICAgICAgICAgIGZvY3VzQ2xhc3M6IFwiZm9jdXNcIiwgLy8gZGVmYXVsdCBjc3MgY2xhc3MgZm9yIHRoZSBmb2N1cyBzdGF0ZVxuICAgICAgICAgICAgb3BlbkNsYXNzOiBcIm9wZW5cIiAvLyBkZWZhdWx0IGNzcyBjbGFzcyBmb3IgdGhlIG9wZW4gc3RhdGVcbiAgICAgICAgfSxcbiAgICAgICAgS2V5Ym9hcmQgPSB7XG4gICAgICAgICAgICBCQUNLU1BBQ0U6IDgsXG4gICAgICAgICAgICBDT01NQTogMTg4LFxuICAgICAgICAgICAgREVMRVRFOiA0NixcbiAgICAgICAgICAgIERPV046IDQwLFxuICAgICAgICAgICAgRU5EOiAzNSxcbiAgICAgICAgICAgIEVOVEVSOiAxMyxcbiAgICAgICAgICAgIEVTQ0FQRTogMjcsXG4gICAgICAgICAgICBIT01FOiAzNixcbiAgICAgICAgICAgIExFRlQ6IDM3LFxuICAgICAgICAgICAgUEFHRV9ET1dOOiAzNCxcbiAgICAgICAgICAgIFBBR0VfVVA6IDMzLFxuICAgICAgICAgICAgUEVSSU9EOiAxOTAsXG4gICAgICAgICAgICBSSUdIVDogMzksXG4gICAgICAgICAgICBTUEFDRTogMzIsXG4gICAgICAgICAgICBUQUI6IDksXG4gICAgICAgICAgICBVUDogMzgsXG4gICAgICAgICAgICBrZXlNYXA6IHtcbiAgICAgICAgICAgICAgICA0ODogXCIwXCIsXG4gICAgICAgICAgICAgICAgNDk6IFwiMVwiLFxuICAgICAgICAgICAgICAgIDUwOiBcIjJcIixcbiAgICAgICAgICAgICAgICA1MTogXCIzXCIsXG4gICAgICAgICAgICAgICAgNTI6IFwiNFwiLFxuICAgICAgICAgICAgICAgIDUzOiBcIjVcIixcbiAgICAgICAgICAgICAgICA1NDogXCI2XCIsXG4gICAgICAgICAgICAgICAgNTU6IFwiN1wiLFxuICAgICAgICAgICAgICAgIDU2OiBcIjhcIixcbiAgICAgICAgICAgICAgICA1NzogXCI5XCIsXG4gICAgICAgICAgICAgICAgNTk6IFwiO1wiLFxuICAgICAgICAgICAgICAgIDY1OiBcImFcIixcbiAgICAgICAgICAgICAgICA2NjogXCJiXCIsXG4gICAgICAgICAgICAgICAgNjc6IFwiY1wiLFxuICAgICAgICAgICAgICAgIDY4OiBcImRcIixcbiAgICAgICAgICAgICAgICA2OTogXCJlXCIsXG4gICAgICAgICAgICAgICAgNzA6IFwiZlwiLFxuICAgICAgICAgICAgICAgIDcxOiBcImdcIixcbiAgICAgICAgICAgICAgICA3MjogXCJoXCIsXG4gICAgICAgICAgICAgICAgNzM6IFwiaVwiLFxuICAgICAgICAgICAgICAgIDc0OiBcImpcIixcbiAgICAgICAgICAgICAgICA3NTogXCJrXCIsXG4gICAgICAgICAgICAgICAgNzY6IFwibFwiLFxuICAgICAgICAgICAgICAgIDc3OiBcIm1cIixcbiAgICAgICAgICAgICAgICA3ODogXCJuXCIsXG4gICAgICAgICAgICAgICAgNzk6IFwib1wiLFxuICAgICAgICAgICAgICAgIDgwOiBcInBcIixcbiAgICAgICAgICAgICAgICA4MTogXCJxXCIsXG4gICAgICAgICAgICAgICAgODI6IFwiclwiLFxuICAgICAgICAgICAgICAgIDgzOiBcInNcIixcbiAgICAgICAgICAgICAgICA4NDogXCJ0XCIsXG4gICAgICAgICAgICAgICAgODU6IFwidVwiLFxuICAgICAgICAgICAgICAgIDg2OiBcInZcIixcbiAgICAgICAgICAgICAgICA4NzogXCJ3XCIsXG4gICAgICAgICAgICAgICAgODg6IFwieFwiLFxuICAgICAgICAgICAgICAgIDg5OiBcInlcIixcbiAgICAgICAgICAgICAgICA5MDogXCJ6XCIsXG4gICAgICAgICAgICAgICAgOTY6IFwiMFwiLFxuICAgICAgICAgICAgICAgIDk3OiBcIjFcIixcbiAgICAgICAgICAgICAgICA5ODogXCIyXCIsXG4gICAgICAgICAgICAgICAgOTk6IFwiM1wiLFxuICAgICAgICAgICAgICAgIDEwMDogXCI0XCIsXG4gICAgICAgICAgICAgICAgMTAxOiBcIjVcIixcbiAgICAgICAgICAgICAgICAxMDI6IFwiNlwiLFxuICAgICAgICAgICAgICAgIDEwMzogXCI3XCIsXG4gICAgICAgICAgICAgICAgMTA0OiBcIjhcIixcbiAgICAgICAgICAgICAgICAxMDU6IFwiOVwiLFxuICAgICAgICAgICAgICAgIDE5MDogXCIuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVzYyBDcmVhdGVzIGEgbmV3IGFjY2Vzc2libGUgbWVnYSBtZW51IGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7anF1ZXJ5fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBNZWdhIE1lbnUgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy51dWlkUHJlZml4PWFjY2Vzc2libGUtbWVnYW1lbnVdIC0gUHJlZml4IGZvciBnZW5lcmF0ZWQgdW5pcXVlIGlkIGF0dHJpYnV0ZXMsIHdoaWNoIGFyZSByZXF1aXJlZCB0byBpbmRpY2F0ZSBhcmlhLW93bnMsIGFyaWEtY29udHJvbHMgYW5kIGFyaWEtbGFiZWxsZWRieVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5tZW51Q2xhc3M9YWNjZXNzaWJsZS1tZWdhbWVudV0gLSBDU1MgY2xhc3MgdXNlZCB0byBkZWZpbmUgdGhlIG1lZ2FtZW51IHN0eWxpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudG9wTmF2SXRlbUNsYXNzPWFjY2Vzc2libGUtbWVnYW1lbnUtdG9wLW5hdi1pdGVtXSAtIENTUyBjbGFzcyBmb3IgYSB0b3AtbGV2ZWwgbmF2aWdhdGlvbiBpdGVtIGluIHRoZSBtZWdhbWVudVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wYW5lbENsYXNzPWFjY2Vzc2libGUtbWVnYW1lbnUtcGFuZWxdIC0gQ1NTIGNsYXNzIGZvciBhIG1lZ2FtZW51IHBhbmVsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBhbmVsR3JvdXBDbGFzcz1hY2Nlc3NpYmxlLW1lZ2FtZW51LXBhbmVsLWdyb3VwXSAtIENTUyBjbGFzcyBmb3IgYSBncm91cCBvZiBpdGVtcyB3aXRoaW4gYSBtZWdhbWVudSBwYW5lbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ob3ZlckNsYXNzPWhvdmVyXSAtIENTUyBjbGFzcyBmb3IgdGhlIGhvdmVyIHN0YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmZvY3VzQ2xhc3M9Zm9jdXNdIC0gQ1NTIGNsYXNzIGZvciB0aGUgZm9jdXMgc3RhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub3BlbkNsYXNzPW9wZW5dIC0gQ1NTIGNsYXNzIGZvciB0aGUgb3BlbiBzdGF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEFjY2Vzc2libGVNZWdhTWVudShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgLy8gbWVyZ2Ugb3B0aW9uYWwgc2V0dGluZ3MgYW5kIGRlZmF1bHRzIGludG8gc2V0dGluZ3NcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICAgICAgdGhpcy5fbmFtZSA9IHBsdWdpbk5hbWU7XG5cbiAgICAgICAgdGhpcy5tb3VzZVRpbWVvdXRJRCA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9jdXNUaW1lb3V0SUQgPSBudWxsO1xuICAgICAgICB0aGlzLm1vdXNlRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmp1c3RGb2N1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgQWNjZXNzaWJsZU1lZ2FNZW51LnByb3RvdHlwZSA9IChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgLyogcHJpdmF0ZSBhdHRyaWJ1dGVzIGFuZCBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAgICAgICB2YXIgdXVpZCA9IDAsXG4gICAgICAgICAgICBrZXlkb3duVGltZW91dER1cmF0aW9uID0gMTAwMCxcbiAgICAgICAgICAgIGtleWRvd25TZWFyY2hTdHJpbmcgPSBcIlwiLFxuICAgICAgICAgICAgaXNUb3VjaCA9IHR5cGVvZiB3aW5kb3cuaGFzT3duUHJvcGVydHkgPT09IFwiZnVuY3Rpb25cIiAmJiAhIXdpbmRvdy5oYXNPd25Qcm9wZXJ0eShcIm9udG91Y2hzdGFydFwiKSxcbiAgICAgICAgICAgIF9nZXRQbHVnaW4sXG4gICAgICAgICAgICBfYWRkVW5pcXVlSWQsXG4gICAgICAgICAgICBfdG9nZ2xlUGFuZWwsXG4gICAgICAgICAgICBfY2xpY2tIYW5kbGVyLFxuICAgICAgICAgICAgX2NsaWNrT3V0c2lkZUhhbmRsZXIsXG4gICAgICAgICAgICBfRE9NQXR0ck1vZGlmaWVkSGFuZGxlcixcbiAgICAgICAgICAgIF9mb2N1c0luSGFuZGxlcixcbiAgICAgICAgICAgIF9mb2N1c091dEhhbmRsZXIsXG4gICAgICAgICAgICBfa2V5RG93bkhhbmRsZXIsXG4gICAgICAgICAgICBfbW91c2VEb3duSGFuZGxlcixcbiAgICAgICAgICAgIF9tb3VzZU92ZXJIYW5kbGVyLFxuICAgICAgICAgICAgX21vdXNlT3V0SGFuZGxlcixcbiAgICAgICAgICAgIF90b2dnbGVFeHBhbmRlZEV2ZW50SGFuZGxlcnM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnV+X2dldFBsdWdpblxuICAgICAgICAgKiBAZGVzYyBSZXR1cm5zIHRoZSBwYXJlbnQgYWNjZXNzaWJsZU1lZ2FNZW51IGluc3RhbmNlIGZvciBhIGdpdmVuIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnRcbiAgICAgICAgICogQG1lbWJlcm9mIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnVcbiAgICAgICAgICogQGlubmVyXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfZ2V0UGx1Z2luID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAkKGVsZW1lbnQpLmNsb3Nlc3QoJzpkYXRhKHBsdWdpbl8nICsgcGx1Z2luTmFtZSArICcpJykuZGF0YShcInBsdWdpbl9cIiArIHBsdWdpbk5hbWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51fl9hZGRVbmlxdWVJZFxuICAgICAgICAgKiBAZGVzYyBBZGRzIGEgdW5pcXVlIGlkIGFuZCBlbGVtZW50LlxuICAgICAgICAgKiBUaGUgaWQgc3RyaW5nIHN0YXJ0cyB3aXRoIHRoZVxuICAgICAgICAgKiBzdHJpbmcgZGVmaW5lZCBpbiBzZXR0aW5ncy51dWlkUHJlZml4LlxuICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudFxuICAgICAgICAgKiBAbWVtYmVyb2YgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudVxuICAgICAgICAgKiBAaW5uZXJcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIF9hZGRVbmlxdWVJZCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3M7XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cihcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hdHRyKFwiaWRcIiwgc2V0dGluZ3MudXVpZFByZWZpeCArIFwiLVwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBcIi1cIiArICgrK3V1aWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudX5fdG9nZ2xlUGFuZWxcbiAgICAgICAgICogQGRlc2MgVG9nZ2xlIHRoZSBkaXNwbGF5IG9mIG1lZ2EgbWVudSBwYW5lbHMgaW4gcmVzcG9uc2UgdG8gYW4gZXZlbnQuXG4gICAgICAgICAqIFRoZSBvcHRpb25hbCBib29sZWFuIHZhbHVlICdoaWRlJyBmb3JjZXMgYWxsIHBhbmVscyB0byBoaWRlLlxuICAgICAgICAgKiBAcGFyYW0ge2V2ZW50fSBldmVudFxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtoaWRlXSBIaWRlIGFsbCBtZWdhIG1lbnUgcGFuZWxzIHdoZW4gdHJ1ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudVxuICAgICAgICAgKiBAaW5uZXJcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIF90b2dnbGVQYW5lbCA9IGZ1bmN0aW9uIChldmVudCwgaGlkZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KSxcbiAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgbWVudSA9IHRoaXMubWVudSxcbiAgICAgICAgICAgICAgICB0b3BsaSA9IHRhcmdldC5jbG9zZXN0KCcuJyArIHNldHRpbmdzLnRvcE5hdkl0ZW1DbGFzcyksXG4gICAgICAgICAgICAgICAgcGFuZWwgPSB0YXJnZXQuaGFzQ2xhc3Moc2V0dGluZ3MucGFuZWxDbGFzcykgPyB0YXJnZXQgOiB0YXJnZXQuY2xvc2VzdCgnLicgKyBzZXR0aW5ncy5wYW5lbENsYXNzKSxcbiAgICAgICAgICAgICAgICBuZXdmb2N1cztcblxuICAgICAgICAgICAgX3RvZ2dsZUV4cGFuZGVkRXZlbnRIYW5kbGVycy5jYWxsKHRoaXMsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAoaGlkZSkge1xuICAgICAgICAgICAgICAgIHRvcGxpID0gbWVudS5maW5kKCcuJyArIHNldHRpbmdzLnRvcE5hdkl0ZW1DbGFzcyArICcgLicgKyBzZXR0aW5ncy5vcGVuQ2xhc3MgKyAnOmZpcnN0JykuY2xvc2VzdCgnLicgKyBzZXR0aW5ncy50b3BOYXZJdGVtQ2xhc3MpO1xuICAgICAgICAgICAgICAgIGlmICghKHRvcGxpLmlzKGV2ZW50LnJlbGF0ZWRUYXJnZXQpIHx8IHRvcGxpLmhhcyhldmVudC5yZWxhdGVkVGFyZ2V0KS5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGV2ZW50LnR5cGUgPT09ICdtb3VzZW91dCcgfHwgZXZlbnQudHlwZSA9PT0gJ2ZvY3Vzb3V0JykgJiYgdG9wbGkuaGFzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0b3BsaS5maW5kKCdbYXJpYS1leHBhbmRlZF0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHNldHRpbmdzLm9wZW5DbGFzcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoJy4nICsgc2V0dGluZ3MucGFuZWxDbGFzcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nICYmIGV2ZW50LmtleUNvZGUgPT09IEtleWJvYXJkLkVTQ0FQRSkgfHwgZXZlbnQudHlwZSA9PT0gJ0RPTUF0dHJNb2RpZmllZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld2ZvY3VzID0gdG9wbGkuZmluZCgnOnRhYmJhYmxlOmZpcnN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51LmZpbmQoJ1thcmlhLWV4cGFuZGVkXS4nICsgdGhhdC5zZXR0aW5ncy5wYW5lbENsYXNzKS5vZmYoJ0RPTUF0dHJNb2RpZmllZC5hY2Nlc3NpYmxlLW1lZ2FtZW51Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Zm9jdXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lmp1c3RGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA5OSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRvcGxpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBtZW51LmZpbmQoJ1thcmlhLWV4cGFuZGVkPXRydWVdJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhzZXR0aW5ncy5vcGVuQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCcuJyArIHNldHRpbmdzLnBhbmVsQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoYXQuZm9jdXNUaW1lb3V0SUQpO1xuICAgICAgICAgICAgICAgIHRvcGxpLnNpYmxpbmdzKClcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ1thcmlhLWV4cGFuZGVkXScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHNldHRpbmdzLm9wZW5DbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcignLicgKyBzZXR0aW5ncy5wYW5lbENsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIHRvcGxpLmZpbmQoJ1thcmlhLWV4cGFuZGVkXScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3Moc2V0dGluZ3Mub3BlbkNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCcuJyArIHNldHRpbmdzLnBhbmVsQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VvdmVyJyAmJiB0YXJnZXQuaXMoJzp0YWJiYWJsZScpICYmIHRvcGxpLmxlbmd0aCA9PT0gMSAmJiBwYW5lbC5sZW5ndGggPT09IDAgJiYgbWVudS5oYXMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5qdXN0Rm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF90b2dnbGVFeHBhbmRlZEV2ZW50SGFuZGxlcnMuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudX5fY2xpY2tIYW5kbGVyXG4gICAgICAgICAqIEBkZXNjIEhhbmRsZSBjbGljayBldmVudCBvbiBtZWdhIG1lbnUgaXRlbVxuICAgICAgICAgKiBAcGFyYW0ge2V2ZW50fSBFdmVudCBvYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnVcbiAgICAgICAgICogQGlubmVyXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgICAgICB0b3BsaSA9IHRhcmdldC5jbG9zZXN0KCcuJyArIHRoaXMuc2V0dGluZ3MudG9wTmF2SXRlbUNsYXNzKSxcbiAgICAgICAgICAgICAgICBwYW5lbCA9IHRhcmdldC5jbG9zZXN0KCcuJyArIHRoaXMuc2V0dGluZ3MucGFuZWxDbGFzcyk7XG4gICAgICAgICAgICBpZiAodG9wbGkubGVuZ3RoID09PSAxXG4gICAgICAgICAgICAgICAgICAgICYmIHBhbmVsLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAmJiB0b3BsaS5maW5kKCcuJyArIHRoaXMuc2V0dGluZ3MucGFuZWxDbGFzcykubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQuaGFzQ2xhc3ModGhpcy5zZXR0aW5ncy5vcGVuQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlUGFuZWwuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuanVzdEZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5qdXN0Rm9jdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5qdXN0Rm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVQYW5lbC5jYWxsKHRoaXMsIGV2ZW50LCB0YXJnZXQuaGFzQ2xhc3ModGhpcy5zZXR0aW5ncy5vcGVuQ2xhc3MpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudX5fY2xpY2tPdXRzaWRlSGFuZGxlclxuICAgICAgICAgKiBAZGVzYyBIYW5kbGUgY2xpY2sgZXZlbnQgb3V0c2lkZSBvZiBhIHRoZSBtZWdhbWVudVxuICAgICAgICAgKiBAcGFyYW0ge2V2ZW50fSBFdmVudCBvYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnVcbiAgICAgICAgICogQGlubmVyXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfY2xpY2tPdXRzaWRlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KHRoaXMubWVudSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlUGFuZWwuY2FsbCh0aGlzLCBldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnV+X0RPTUF0dHJNb2RpZmllZEhhbmRsZXJcbiAgICAgICAgICogQGRlc2MgSGFuZGxlIERPTUF0dHJNb2RpZmllZCBldmVudCBvbiBwYW5lbCB0byByZXNwb25kIHRvIFdpbmRvd3MgOCBOYXJyYXRvciBFeHBhbmRDb2xsYXBzZSBwYXR0ZXJuXG4gICAgICAgICAqIEBwYXJhbSB7ZXZlbnR9IEV2ZW50IG9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudVxuICAgICAgICAgKiBAaW5uZXJcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIF9ET01BdHRyTW9kaWZpZWRIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudC5hdHRyTmFtZSA9PT0gJ2FyaWEtZXhwYW5kZWQnXG4gICAgICAgICAgICAgICAgICAgICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQubmV3VmFsdWUgPT09ICdmYWxzZSdcbiAgICAgICAgICAgICAgICAgICAgJiYgJChldmVudC50YXJnZXQpLmhhc0NsYXNzKHRoaXMuc2V0dGluZ3Mub3BlbkNsYXNzKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZVBhbmVsLmNhbGwodGhpcywgZXZlbnQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51fl9mb2N1c0luSGFuZGxlclxuICAgICAgICAgKiBAZGVzYyBIYW5kbGUgZm9jdXNpbiBldmVudCBvbiBtZWdhIG1lbnUgaXRlbS5cbiAgICAgICAgICogQHBhcmFtIHtldmVudH0gRXZlbnQgb2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51XG4gICAgICAgICAqIEBpbm5lclxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX2ZvY3VzSW5IYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5mb2N1c1RpbWVvdXRJRCk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChldmVudC50YXJnZXQpLFxuICAgICAgICAgICAgICAgIHBhbmVsID0gdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5zZXR0aW5ncy5wYW5lbENsYXNzKTtcbiAgICAgICAgICAgIHRhcmdldFxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLnNldHRpbmdzLmZvY3VzQ2xhc3MpXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljay5hY2Nlc3NpYmxlLW1lZ2FtZW51JywgJC5wcm94eShfY2xpY2tIYW5kbGVyLCB0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLmp1c3RGb2N1c2VkID0gIXRoaXMubW91c2VGb2N1c2VkO1xuICAgICAgICAgICAgdGhpcy5tb3VzZUZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhbmVscy5ub3QocGFuZWwpLmZpbHRlcignLicgKyB0aGlzLnNldHRpbmdzLm9wZW5DbGFzcykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZVBhbmVsLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51fl9mb2N1c091dEhhbmRsZXJcbiAgICAgICAgICogQGRlc2MgSGFuZGxlIGZvY3Vzb3V0IGV2ZW50IG9uIG1lZ2EgbWVudSBpdGVtLlxuICAgICAgICAgKiBAcGFyYW0ge2V2ZW50fSBFdmVudCBvYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnVcbiAgICAgICAgICogQGlubmVyXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfZm9jdXNPdXRIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmp1c3RGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gJChldmVudC50YXJnZXQpLFxuICAgICAgICAgICAgICAgIHRvcGxpID0gdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5zZXR0aW5ncy50b3BOYXZJdGVtQ2xhc3MpLFxuICAgICAgICAgICAgICAgIGtlZXBPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3ModGhpcy5zZXR0aW5ncy5mb2N1c0NsYXNzKVxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLmFjY2Vzc2libGUtbWVnYW1lbnUnKTtcblxuICAgICAgICAgICAgaWYgKHdpbmRvdy5jdm94KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgQ2hyb21lVm94IGlzIHJ1bm5pbmcuLi5cbiAgICAgICAgICAgICAgICB0aGF0LmZvY3VzVGltZW91dElEID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jdm94LkFwaS5nZXRDdXJyZW50Tm9kZShmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvcGxpLmhhcyhub2RlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIGN1cnJlbnQgbm9kZSBiZWluZyB2b2ljZWQgaXMgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbWVnYSBtZW51LCBjbGVhclRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gdGhlIHBhbmVsIHN0YXlzIG9wZW4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoYXQuZm9jdXNUaW1lb3V0SUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmZvY3VzVGltZW91dElEID0gc2V0VGltZW91dChmdW5jdGlvbiAoc2NvcGUsIGV2ZW50LCBoaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVQYW5lbC5jYWxsKHNjb3BlLCBldmVudCwgaGlkZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjc1LCB0aGF0LCBldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIDI1KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhhdC5mb2N1c1RpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlUGFuZWwuY2FsbCh0aGF0LCBldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudX5fa2V5RG93bkhhbmRsZXJcbiAgICAgICAgICogQGRlc2MgSGFuZGxlIGtleWRvd24gZXZlbnQgb24gbWVnYSBtZW51LlxuICAgICAgICAgKiBAcGFyYW0ge2V2ZW50fSBFdmVudCBvYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnVcbiAgICAgICAgICogQGlubmVyXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfa2V5RG93bkhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gKHRoaXMuY29uc3RydWN0b3IgPT09IEFjY2Vzc2libGVNZWdhTWVudSkgPyB0aGlzIDogX2dldFBsdWdpbih0aGlzKSwgLy8gZGV0ZXJtaW5lIHRoZSBBY2Nlc3NpYmxlTWVnYU1lbnUgcGx1Z2luIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MgPSB0aGF0LnNldHRpbmdzLFxuICAgICAgICAgICAgICAgIHRhcmdldCA9ICQoJCh0aGlzKS5pcygnLicgKyBzZXR0aW5ncy5ob3ZlckNsYXNzICsgJzp0YWJiYWJsZScpID8gdGhpcyA6IGV2ZW50LnRhcmdldCksIC8vIGlmIHRoZSBlbGVtZW50IGlzIGhvdmVyZWQgdGhlIHRhcmdldCBpcyB0aGlzLCBvdGhlcndpc2UsIGl0cyB0aGUgZm9jdXNlZCBlbGVtZW50XG4gICAgICAgICAgICAgICAgbWVudSA9IHRoYXQubWVudSxcbiAgICAgICAgICAgICAgICB0b3BuYXZpdGVtcyA9IHRoYXQudG9wbmF2aXRlbXMsXG4gICAgICAgICAgICAgICAgdG9wbGkgPSB0YXJnZXQuY2xvc2VzdCgnLicgKyBzZXR0aW5ncy50b3BOYXZJdGVtQ2xhc3MpLFxuICAgICAgICAgICAgICAgIHRhYmJhYmxlcyA9IG1lbnUuZmluZCgnOnRhYmJhYmxlJyksXG4gICAgICAgICAgICAgICAgcGFuZWwgPSB0YXJnZXQuaGFzQ2xhc3Moc2V0dGluZ3MucGFuZWxDbGFzcykgPyB0YXJnZXQgOiB0YXJnZXQuY2xvc2VzdCgnLicgKyBzZXR0aW5ncy5wYW5lbENsYXNzKSxcbiAgICAgICAgICAgICAgICBwYW5lbEdyb3VwcyA9IHBhbmVsLmZpbmQoJy4nICsgc2V0dGluZ3MucGFuZWxHcm91cENsYXNzKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFuZWxHcm91cCA9IHRhcmdldC5jbG9zZXN0KCcuJyArIHNldHRpbmdzLnBhbmVsR3JvdXBDbGFzcyksXG4gICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICBrZXljb2RlID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC53aGljaCxcbiAgICAgICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBuZXdTdHJpbmcgPSBLZXlib2FyZC5rZXlNYXBbZXZlbnQua2V5Q29kZV0gfHwgJycsXG4gICAgICAgICAgICAgICAgcmVnZXgsXG4gICAgICAgICAgICAgICAgaXNUb3BOYXZJdGVtID0gKHRvcGxpLmxlbmd0aCA9PT0gMSAmJiBwYW5lbC5sZW5ndGggPT09IDApO1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmlzKFwiaW5wdXQ6Zm9jdXMsIHNlbGVjdDpmb2N1cywgdGV4dGFyZWE6Zm9jdXMsIGJ1dHRvbjpmb2N1c1wiKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBldmVudCB0YXJnZXQgaXMgYSBmb3JtIGVsZW1lbnQgd2Ugc2hvdWxkIGhhbmRsZSBrZXlkb3duIG5vcm1hbGx5XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmlzKCcuJyArIHNldHRpbmdzLmhvdmVyQ2xhc3MgKyAnOnRhYmJhYmxlJykpIHtcbiAgICAgICAgICAgICAgICAkKCdodG1sJykub2ZmKCdrZXlkb3duLmFjY2Vzc2libGUtbWVnYW1lbnUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoIChrZXljb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLkVTQ0FQRTpcbiAgICAgICAgICAgICAgICBfdG9nZ2xlUGFuZWwuY2FsbCh0aGF0LCBldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLkRPV046XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNUb3BOYXZJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVQYW5lbC5jYWxsKHRoYXQsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSAodG9wbGkuZmluZCgnLicgKyBzZXR0aW5ncy5wYW5lbENsYXNzICsgJyA6dGFiYmFibGU6Zmlyc3QnKS5mb2N1cygpLmxlbmd0aCA9PT0gMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSAodGFiYmFibGVzLmZpbHRlcignOmd0KCcgKyB0YWJiYWJsZXMuaW5kZXgodGFyZ2V0KSArICcpOmZpcnN0JykuZm9jdXMoKS5sZW5ndGggPT09IDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghZm91bmQgJiYgd2luZG93Lm9wZXJhICYmIG9wZXJhLnRvU3RyaW5nKCkgPT09IFwiW29iamVjdCBPcGVyYV1cIiAmJiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB0YWJiYWJsZXMgPSAkKCc6dGFiYmFibGUnKTtcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRhYmJhYmxlcy5pbmRleCh0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9ICgkKCc6dGFiYmFibGU6Z3QoJyArICQoJzp0YWJiYWJsZScpLmluZGV4KHRhcmdldCkgKyAnKTpmaXJzdCcpLmZvY3VzKCkubGVuZ3RoID09PSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLlVQOlxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzVG9wTmF2SXRlbSAmJiB0YXJnZXQuaGFzQ2xhc3Moc2V0dGluZ3Mub3BlbkNsYXNzKSkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlUGFuZWwuY2FsbCh0aGF0LCBldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSB0b3BuYXZpdGVtcy5maWx0ZXIoJzpsdCgnICsgdG9wbmF2aXRlbXMuaW5kZXgodG9wbGkpICsgJyk6bGFzdCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC5jaGlsZHJlbignLicgKyBzZXR0aW5ncy5wYW5lbENsYXNzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gKG5leHQuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhzZXR0aW5ncy5vcGVuQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcignLicgKyBzZXR0aW5ncy5wYW5lbENsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJzp0YWJiYWJsZTpsYXN0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZm9jdXMoKSA9PT0gMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1RvcE5hdkl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSAodGFiYmFibGVzLmZpbHRlcignOmx0KCcgKyB0YWJiYWJsZXMuaW5kZXgodGFyZ2V0KSArICcpOmxhc3QnKS5mb2N1cygpLmxlbmd0aCA9PT0gMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZCAmJiB3aW5kb3cub3BlcmEgJiYgb3BlcmEudG9TdHJpbmcoKSA9PT0gXCJbb2JqZWN0IE9wZXJhXVwiICYmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmJhYmxlcyA9ICQoJzp0YWJiYWJsZScpO1xuICAgICAgICAgICAgICAgICAgICBpID0gdGFiYmFibGVzLmluZGV4KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gKCQoJzp0YWJiYWJsZTpsdCgnICsgJCgnOnRhYmJhYmxlJykuaW5kZXgodGFyZ2V0KSArICcpOmZpcnN0JykuZm9jdXMoKS5sZW5ndGggPT09IDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgS2V5Ym9hcmQuUklHSFQ6XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNUb3BOYXZJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gKHRvcG5hdml0ZW1zLmZpbHRlcignOmd0KCcgKyB0b3BuYXZpdGVtcy5pbmRleCh0b3BsaSkgKyAnKTpmaXJzdCcpLmZpbmQoJzp0YWJiYWJsZTpmaXJzdCcpLmZvY3VzKCkubGVuZ3RoID09PSAxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFuZWxHcm91cHMubGVuZ3RoICYmIGN1cnJlbnRQYW5lbEdyb3VwLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGN1cnJlbnQgcGFuZWwgY29udGFpbnMgcGFuZWwgZ3JvdXBzLCBhbmQgd2UgYXJlIGFibGUgdG8gZm9jdXMgdGhlIGZpcnN0IHRhYmJhYmxlIGVsZW1lbnQgb2YgdGhlIG5leHQgcGFuZWwgZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gKHBhbmVsR3JvdXBzLmZpbHRlcignOmd0KCcgKyBwYW5lbEdyb3Vwcy5pbmRleChjdXJyZW50UGFuZWxHcm91cCkgKyAnKTpmaXJzdCcpLmZpbmQoJzp0YWJiYWJsZTpmaXJzdCcpLmZvY3VzKCkubGVuZ3RoID09PSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gKHRvcGxpLmZpbmQoJzp0YWJiYWJsZTpmaXJzdCcpLmZvY3VzKCkubGVuZ3RoID09PSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgS2V5Ym9hcmQuTEVGVDpcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmIChpc1RvcE5hdkl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSAodG9wbmF2aXRlbXMuZmlsdGVyKCc6bHQoJyArIHRvcG5hdml0ZW1zLmluZGV4KHRvcGxpKSArICcpOmxhc3QnKS5maW5kKCc6dGFiYmFibGU6Zmlyc3QnKS5mb2N1cygpLmxlbmd0aCA9PT0gMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhbmVsR3JvdXBzLmxlbmd0aCAmJiBjdXJyZW50UGFuZWxHcm91cC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjdXJyZW50IHBhbmVsIGNvbnRhaW5zIHBhbmVsIGdyb3VwcywgYW5kIHdlIGFyZSBhYmxlIHRvIGZvY3VzIHRoZSBmaXJzdCB0YWJiYWJsZSBlbGVtZW50IG9mIHRoZSBwcmV2aW91cyBwYW5lbCBncm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSAocGFuZWxHcm91cHMuZmlsdGVyKCc6bHQoJyArIHBhbmVsR3JvdXBzLmluZGV4KGN1cnJlbnRQYW5lbEdyb3VwKSArICcpOmxhc3QnKS5maW5kKCc6dGFiYmFibGU6Zmlyc3QnKS5mb2N1cygpLmxlbmd0aCA9PT0gMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9ICh0b3BsaS5maW5kKCc6dGFiYmFibGU6Zmlyc3QnKS5mb2N1cygpLmxlbmd0aCA9PT0gMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLlRBQjpcbiAgICAgICAgICAgICAgICBpID0gdGFiYmFibGVzLmluZGV4KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5ICYmIGlzVG9wTmF2SXRlbSAmJiB0YXJnZXQuaGFzQ2xhc3Moc2V0dGluZ3Mub3BlbkNsYXNzKSkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlUGFuZWwuY2FsbCh0aGF0LCBldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSB0b3BuYXZpdGVtcy5maWx0ZXIoJzpsdCgnICsgdG9wbmF2aXRlbXMuaW5kZXgodG9wbGkpICsgJyk6bGFzdCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC5jaGlsZHJlbignLicgKyBzZXR0aW5ncy5wYW5lbENsYXNzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gbmV4dC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKHNldHRpbmdzLm9wZW5DbGFzcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCcuJyArIHNldHRpbmdzLnBhbmVsQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnOnRhYmJhYmxlOmxhc3QnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5zaGlmdEtleSAmJiBpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9ICh0YWJiYWJsZXMuZmlsdGVyKCc6bHQoJyArIGkgKyAnKTpsYXN0JykuZm9jdXMoKS5sZW5ndGggPT09IDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWV2ZW50LnNoaWZ0S2V5ICYmIGkgPCB0YWJiYWJsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9ICh0YWJiYWJsZXMuZmlsdGVyKCc6Z3QoJyArIGkgKyAnKTpmaXJzdCcpLmZvY3VzKCkubGVuZ3RoID09PSAxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5vcGVyYSAmJiBvcGVyYS50b1N0cmluZygpID09PSBcIltvYmplY3QgT3BlcmFdXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFiYmFibGVzID0gJCgnOnRhYmJhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgIGkgPSB0YWJiYWJsZXMuaW5kZXgodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9ICgkKCc6dGFiYmFibGU6bHQoJyArICQoJzp0YWJiYWJsZScpLmluZGV4KHRhcmdldCkgKyAnKTpsYXN0JykuZm9jdXMoKS5sZW5ndGggPT09IDEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSAoJCgnOnRhYmJhYmxlOmd0KCcgKyAkKCc6dGFiYmFibGUnKS5pbmRleCh0YXJnZXQpICsgJyk6Zmlyc3QnKS5mb2N1cygpLmxlbmd0aCA9PT0gMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLlNQQUNFOlxuICAgICAgICAgICAgICAgIGlmIChpc1RvcE5hdkl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2NsaWNrSGFuZGxlci5jYWxsKHRoYXQsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEtleWJvYXJkLkVOVEVSOlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBhbHBoYW51bWVyaWMgZmlsdGVyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMua2V5ZG93blRpbWVvdXRJRCk7XG5cbiAgICAgICAgICAgICAgICBrZXlkb3duU2VhcmNoU3RyaW5nICs9IG5ld1N0cmluZyAhPT0ga2V5ZG93blNlYXJjaFN0cmluZyA/IG5ld1N0cmluZyA6ICcnO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleWRvd25TZWFyY2hTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmtleWRvd25UaW1lb3V0SUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ZG93blNlYXJjaFN0cmluZyA9ICcnO1xuICAgICAgICAgICAgICAgIH0sIGtleWRvd25UaW1lb3V0RHVyYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVG9wTmF2SXRlbSAmJiAhdGFyZ2V0Lmhhc0NsYXNzKHNldHRpbmdzLm9wZW5DbGFzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFiYmFibGVzID0gdGFiYmFibGVzLmZpbHRlcignOm5vdCguJyArIHNldHRpbmdzLnBhbmVsQ2xhc3MgKyAnIDp0YWJiYWJsZSknKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YWJiYWJsZXMgPSB0b3BsaS5maW5kKCc6dGFiYmFibGUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFiYmFibGVzID0gJCh0YWJiYWJsZXMuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXZlcnNlKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YWJiYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbyA9IHRhYmJhYmxlcy5lcShpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uaXModGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAoa2V5ZG93blNlYXJjaFN0cmluZy5sZW5ndGggPT09IDEpID8gaSArIDEgOiBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoJ14nICsga2V5ZG93blNlYXJjaFN0cmluZy5yZXBsYWNlKC9bXFwtXFxbXFxde30oKSorPy4sXFxcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpLCAnaScpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCB0YWJiYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbyA9IHRhYmJhYmxlcy5lcShpKTtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAkLnRyaW0oby50ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXgudGVzdChsYWJlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0YXJ0OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0YWJiYWJsZXMuZXEoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9ICQudHJpbShvLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXgudGVzdChsYWJlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGF0Lmp1c3RGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnV+X21vdXNlRG93bkhhbmRsZXJcbiAgICAgICAgICogQGRlc2MgSGFuZGxlIG1vdXNlZG93biBldmVudCBvbiBtZWdhIG1lbnUuXG4gICAgICAgICAqIEBwYXJhbSB7ZXZlbnR9IEV2ZW50IG9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgYWNjZXNzaWJsZU1lZ2FNZW51XG4gICAgICAgICAqIEBpbm5lclxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX21vdXNlRG93bkhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXModGhpcy5zZXR0aW5ncy5wYW5lbENsYXNzKSB8fCAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcIjpmb2N1c2FibGVcIikubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZUZvY3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tb3VzZVRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZvY3VzVGltZW91dElEKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51fl9tb3VzZU92ZXJIYW5kbGVyXG4gICAgICAgICAqIEBkZXNjIEhhbmRsZSBtb3VzZW92ZXIgZXZlbnQgb24gbWVnYSBtZW51LlxuICAgICAgICAgKiBAcGFyYW0ge2V2ZW50fSBFdmVudCBvYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGpRdWVyeS5mbi5hY2Nlc3NpYmxlTWVnYU1lbnVcbiAgICAgICAgICogQGlubmVyXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfbW91c2VPdmVySGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubW91c2VUaW1lb3V0SUQpO1xuICAgICAgICAgICAgJChldmVudC50YXJnZXQpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKHRoaXMuc2V0dGluZ3MuaG92ZXJDbGFzcyk7XG4gICAgICAgICAgICBfdG9nZ2xlUGFuZWwuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKCc6dGFiYmFibGUnKSkge1xuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5vbigna2V5ZG93bi5hY2Nlc3NpYmxlLW1lZ2FtZW51JywgJC5wcm94eShfa2V5RG93bkhhbmRsZXIsIGV2ZW50LnRhcmdldCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51fl9tb3VzZU91dEhhbmRsZXJcbiAgICAgICAgICogQGRlc2MgSGFuZGxlIG1vdXNlb3V0IGV2ZW50IG9uIG1lZ2EgbWVudS5cbiAgICAgICAgICogQHBhcmFtIHtldmVudH0gRXZlbnQgb2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51XG4gICAgICAgICAqIEBpbm5lclxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX21vdXNlT3V0SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgJChldmVudC50YXJnZXQpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoYXQuc2V0dGluZ3MuaG92ZXJDbGFzcyk7XG5cbiAgICAgICAgICAgIHRoYXQubW91c2VUaW1lb3V0SUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlUGFuZWwuY2FsbCh0aGF0LCBldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICB9LCAyNTApO1xuICAgICAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcygnOnRhYmJhYmxlJykpIHtcbiAgICAgICAgICAgICAgICAkKCdodG1sJykub2ZmKCdrZXlkb3duLmFjY2Vzc2libGUtbWVnYW1lbnUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBfdG9nZ2xlRXhwYW5kZWRFdmVudEhhbmRsZXJzID0gZnVuY3Rpb24gKGhpZGUpIHtcbiAgICAgICAgICAgIHZhciBtZW51ID0gdGhpcy5tZW51O1xuICAgICAgICAgICAgaWYgKGhpZGUpIHtcbiAgICAgICAgICAgICAgICAkKCdodG1sJykub2ZmKCdtb3VzZXVwLm91dHNpZGUtYWNjZXNzaWJsZS1tZWdhbWVudSwgdG91Y2hlbmQub3V0c2lkZS1hY2Nlc3NpYmxlLW1lZ2FtZW51LCBtc3BvaW50ZXJ1cC5vdXRzaWRlLWFjY2Vzc2libGUtbWVnYW1lbnUsICBwb2ludGVydXAub3V0c2lkZS1hY2Nlc3NpYmxlLW1lZ2FtZW51Jyk7XG5cbiAgICAgICAgICAgICAgICBtZW51LmZpbmQoJ1thcmlhLWV4cGFuZGVkXS4nICsgdGhpcy5zZXR0aW5ncy5wYW5lbENsYXNzKS5vZmYoJ0RPTUF0dHJNb2RpZmllZC5hY2Nlc3NpYmxlLW1lZ2FtZW51Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5vbignbW91c2V1cC5vdXRzaWRlLWFjY2Vzc2libGUtbWVnYW1lbnUsIHRvdWNoZW5kLm91dHNpZGUtYWNjZXNzaWJsZS1tZWdhbWVudSwgbXNwb2ludGVydXAub3V0c2lkZS1hY2Nlc3NpYmxlLW1lZ2FtZW51LCAgcG9pbnRlcnVwLm91dHNpZGUtYWNjZXNzaWJsZS1tZWdhbWVudScsICQucHJveHkoX2NsaWNrT3V0c2lkZUhhbmRsZXIsIHRoaXMpKTtcblxuICAgICAgICAgICAgICAgIC8qIE5hcnJhdG9yIGluIFdpbmRvd3MgOCBhdXRvbWF0aWNhbGx5IHRvZ2dsZXMgdGhlIGFyaWEtZXhwYW5kZWQgcHJvcGVydHkgb24gZG91YmxlIHRhcCBvciBjbGljay5cbiAgICAgICAgICAgICAgICAgICBUbyByZXNwb25kIHRvIHRoZSBjaGFuZ2UgdG8gY29sbGFwc2UgdGhlIHBhbmVsLCB3ZSBtdXN0IGFkZCBhIGxpc3RlbmVyIGZvciBhIERPTUF0dHJNb2RpZmllZCBldmVudC4gKi9cbiAgICAgICAgICAgICAgICBtZW51LmZpbmQoJ1thcmlhLWV4cGFuZGVkPXRydWVdLicgKyB0aGlzLnNldHRpbmdzLnBhbmVsQ2xhc3MpLm9uKCdET01BdHRyTW9kaWZpZWQuYWNjZXNzaWJsZS1tZWdhbWVudScsICQucHJveHkoX0RPTUF0dHJNb2RpZmllZEhhbmRsZXIsIHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKiBwdWJsaWMgYXR0cmlidXRlcyBhbmQgbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcjogQWNjZXNzaWJsZU1lZ2FNZW51LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBsZW5kcyBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51XG4gICAgICAgICAgICAgKiBAZGVzYyBJbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGUgYWNjZXNzaWJsZU1lZ2FNZW51IHBsdWdpbnNcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgIG5hdiA9ICQodGhpcy5lbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgbWVudSA9IG5hdi5jaGlsZHJlbigpLmZpcnN0KCksXG4gICAgICAgICAgICAgICAgICAgIHRvcG5hdml0ZW1zID0gbWVudS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoc2V0dGluZ3MsIG5hdiwgbWVudSwgdG9wbmF2aXRlbXMpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKHNldHRpbmdzLCBuYXYsIG1lbnUsIHRvcG5hdml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnUgPSBtZW51O1xuICAgICAgICAgICAgICAgIHRoaXMudG9wbmF2aXRlbXMgPSB0b3BuYXZpdGVtcztcblxuICAgICAgICAgICAgICAgIG5hdi5hdHRyKFwicm9sZVwiLCBcIm5hdmlnYXRpb25cIik7XG4gICAgICAgICAgICAgICAgbWVudS5hZGRDbGFzcyhzZXR0aW5ncy5tZW51Q2xhc3MpO1xuICAgICAgICAgICAgICAgIHRvcG5hdml0ZW1zLmVhY2goZnVuY3Rpb24gKGksIHRvcG5hdml0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvcG5hdml0ZW1saW5rLCB0b3BuYXZpdGVtcGFuZWw7XG4gICAgICAgICAgICAgICAgICAgIHRvcG5hdml0ZW0gPSAkKHRvcG5hdml0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB0b3BuYXZpdGVtLmFkZENsYXNzKHNldHRpbmdzLnRvcE5hdkl0ZW1DbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIHRvcG5hdml0ZW1saW5rID0gdG9wbmF2aXRlbS5maW5kKFwiOnRhYmJhYmxlOmZpcnN0XCIpO1xuICAgICAgICAgICAgICAgICAgICB0b3BuYXZpdGVtcGFuZWwgPSB0b3BuYXZpdGVtLmNoaWxkcmVuKFwiOm5vdCg6dGFiYmFibGUpOmxhc3RcIik7XG4gICAgICAgICAgICAgICAgICAgIF9hZGRVbmlxdWVJZC5jYWxsKHRoYXQsIHRvcG5hdml0ZW1saW5rKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvcG5hdml0ZW1wYW5lbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRVbmlxdWVJZC5jYWxsKHRoYXQsIHRvcG5hdml0ZW1wYW5lbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BuYXZpdGVtbGluay5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtaGFzcG9wdXBcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtY29udHJvbHNcIjogdG9wbmF2aXRlbXBhbmVsLmF0dHIoXCJpZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BuYXZpdGVtcGFuZWwuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyb2xlXCI6IFwiZ3JvdXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhzZXR0aW5ncy5wYW5lbENsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5ub3QoXCJbYXJpYS1sYWJlbGxlZGJ5XVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIHRvcG5hdml0ZW1saW5rLmF0dHIoXCJpZFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMucGFuZWxzID0gbWVudS5maW5kKFwiLlwiICsgc2V0dGluZ3MucGFuZWxDbGFzcyk7XG5cbiAgICAgICAgICAgICAgICBtZW51Lm9uKFwiZm9jdXNpbi5hY2Nlc3NpYmxlLW1lZ2FtZW51XCIsIFwiOmZvY3VzYWJsZSwgLlwiICsgc2V0dGluZ3MucGFuZWxDbGFzcywgJC5wcm94eShfZm9jdXNJbkhhbmRsZXIsIHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICAub24oXCJmb2N1c291dC5hY2Nlc3NpYmxlLW1lZ2FtZW51XCIsIFwiOmZvY3VzYWJsZSwgLlwiICsgc2V0dGluZ3MucGFuZWxDbGFzcywgJC5wcm94eShfZm9jdXNPdXRIYW5kbGVyLCB0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwia2V5ZG93bi5hY2Nlc3NpYmxlLW1lZ2FtZW51XCIsICQucHJveHkoX2tleURvd25IYW5kbGVyLCB0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyLmFjY2Vzc2libGUtbWVnYW1lbnVcIiwgJC5wcm94eShfbW91c2VPdmVySGFuZGxlciwgdGhpcykpXG4gICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0LmFjY2Vzc2libGUtbWVnYW1lbnVcIiwgJC5wcm94eShfbW91c2VPdXRIYW5kbGVyLCB0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2Vkb3duLmFjY2Vzc2libGUtbWVnYW1lbnVcIiwgJC5wcm94eShfbW91c2VEb3duSGFuZGxlciwgdGhpcykpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVudS5vbihcInRvdWNoc3RhcnQuYWNjZXNzaWJsZS1tZWdhbWVudVwiLCAgJC5wcm94eShfY2xpY2tIYW5kbGVyLCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWVudS5maW5kKFwiaHJcIikuYXR0cihcInJvbGVcIiwgXCJzZXBhcmF0b3JcIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5jbG9zZXN0KG1lbnUpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS50cmlnZ2VyKFwiZm9jdXNpbi5hY2Nlc3NpYmxlLW1lZ2FtZW51XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQGRlc2MgR2V0IGRlZmF1bHQgdmFsdWVzXG4gICAgICAgICAgICAgKiBAZXhhbXBsZSAkKHNlbGVjdG9yKS5hY2Nlc3NpYmxlTWVnYU1lbnUoXCJnZXREZWZhdWx0c1wiKTtcbiAgICAgICAgICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0RGVmYXVsdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdHM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBkZXNjIEdldCBhbnkgb3B0aW9uIHNldCB0byBwbHVnaW4gdXNpbmcgaXRzIG5hbWUgKGFzIHN0cmluZylcbiAgICAgICAgICAgICAqIEBleGFtcGxlICQoc2VsZWN0b3IpLmFjY2Vzc2libGVNZWdhTWVudShcImdldE9wdGlvblwiLCBzb21lX29wdGlvbik7XG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0XG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldE9wdGlvbjogZnVuY3Rpb24gKG9wdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzW29wdF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBkZXNjIEdldCBhbGwgb3B0aW9uc1xuICAgICAgICAgICAgICogQGV4YW1wbGUgJChzZWxlY3RvcikuYWNjZXNzaWJsZU1lZ2FNZW51KFwiZ2V0QWxsT3B0aW9uc1wiKTtcbiAgICAgICAgICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqUXVlcnkuZm4uYWNjZXNzaWJsZU1lZ2FNZW51XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0QWxsT3B0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAZGVzYyBTZXQgb3B0aW9uXG4gICAgICAgICAgICAgKiBAZXhhbXBsZSAkKHNlbGVjdG9yKS5hY2Nlc3NpYmxlTWVnYU1lbnUoXCJzZXRPcHRpb25cIiwgXCJvcHRpb25fbmFtZVwiLCAgXCJvcHRpb25fdmFsdWVcIiwgIHJlaW5pdGlhbGl6ZSk7XG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0IC0gT3B0aW9uIG5hbWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgLSBPcHRpb24gdmFsdWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlaW5pdGlhbGl6ZV0gLSBib29sZWFuIHRvIHJlLWluaXRpYWxpemUgdGhlIG1lbnUuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgalF1ZXJ5LmZuLmFjY2Vzc2libGVNZWdhTWVudVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldE9wdGlvbjogZnVuY3Rpb24gKG9wdCwgdmFsdWUsIHJlaW5pdGlhbGl6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Nbb3B0XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChyZWluaXRpYWxpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKiBsaWdodHdlaWdodCBwbHVnaW4gd3JhcHBlciBhcm91bmQgdGhlIGNvbnN0cnVjdG9yLFxuICAgICAgIHRvIHByZXZlbnQgYWdhaW5zdCBtdWx0aXBsZSBpbnN0YW50aWF0aW9ucyAqL1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIGFjY2Vzc2libGVNZWdhTWVudVxuICAgICAqIEBtZW1iZXJPZiBqUXVlcnkuZm5cbiAgICAgKiBAY2xhc3NkZXNjIEltcGxlbWVudHMgYW4gYWNjZXNzaWJsZSBtZWdhIG1lbnUgYXMgYSBqUXVlcnkgcGx1Z2luLlxuICAgICAqIDxwPlRoZSBtZWdhLW1lbnUgSXQgaXMgbW9kZWxlZCBhZnRlciB0aGUgbWVnYSBtZW51IG9uIHtAbGluayBodHRwOi8vYWRvYmUuY29tfGFkb2JlLmNvbX0gYnV0IGhhcyBiZWVuIHNpbXBsaWZpZWQgZm9yIHVzZSBieSBvdGhlcnMuIEEgYnJpZWYgZGVzY3JpcHRpb24gb2YgdGhlIGludGVyYWN0aW9uIGRlc2lnbiBjaG9pY2VzIGNhbiBiZSBmb3VuZCBpbiBhIGJsb2cgcG9zdCBhdCB7QGxpbmsgaHR0cDovL2Jsb2dzLmFkb2JlLmNvbS9hY2Nlc3NpYmlsaXR5LzIwMTMvMDUvYWRvYmUtY29tLmh0bWx8TWVnYSBtZW51IGFjY2Vzc2liaWxpdHkgb24gYWRvYmUuY29tfS48L3A+XG4gICAgICogPGgzPktleWJvYXJkIEFjY2Vzc2liaWxpdHk8L2gzPlxuICAgICAqIDxwPlRoZSBhY2Nlc3NpYmxlIG1lZ2EgbWVudSBzdXBwb3J0cyBrZXlib2FyZCBpbnRlcmFjdGlvbiBtb2RlbGVkIGFmdGVyIHRoZSBiZWhhdmlvciBkZXNjcmliZWQgaW4gdGhlIHtAbGluayBodHRwOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvI21lbnV8V0FJLUFSSUEgTWVudSBvciBNZW51IGJhciAod2lkZ2V0KSBkZXNpZ24gcGF0dGVybn0sIGhvd2V2ZXIgd2UgYWxzbyB0cnkgdG8gcmVzcGVjdCB1c2VycycgZ2VuZXJhbCBleHBlY3RhdGlvbnMgZm9yIHRoZSBiZWhhdmlvciBvZiBsaW5rcyBpbiBhIGdsb2JhbCBuYXZpZ2F0aW9uLiBUbyB0aGlzIGVuZCwgdGhlIGFjY2Vzc2libGUgbWVnYSBtZW51IGltcGxlbWVudGF0aW9uIHBlcm1pdHMgdGFiIGZvY3VzIG9uIGVhY2ggb2YgdGhlIHNpeCB0b3AtbGV2ZWwgbWVudSBpdGVtcy4gV2hlbiBvbmUgb2YgdGhlIG1lbnUgaXRlbXMgaGFzIGZvY3VzLCBwcmVzc2luZyB0aGUgRW50ZXIga2V5LCBTcGFjZWJhciBvciBEb3duIGFycm93IHdpbGwgb3BlbiB0aGUgc3VibWVudSBwYW5lbCwgYW5kIHByZXNzaW5nIHRoZSBMZWZ0IG9yIFJpZ2h0IGFycm93IGtleSB3aWxsIHNoaWZ0IGZvY3VzIHRvIHRoZSBhZGphY2VudCBtZW51IGl0ZW0uIExpbmtzIHdpdGhpbiB0aGUgc3VibWVudSBwYW5lbHMgYXJlIGluY2x1ZGVkIGluIHRoZSB0YWIgb3JkZXIgd2hlbiB0aGUgcGFuZWwgaXMgb3Blbi4gVGhleSBjYW4gYWxzbyBiZSBuYXZpZ2F0ZWQgd2l0aCB0aGUgYXJyb3cga2V5cyBvciBieSB0eXBpbmcgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGUgbGluayBuYW1lLCB3aGljaCBzcGVlZHMgdXAga2V5Ym9hcmQgbmF2aWdhdGlvbiBjb25zaWRlcmFibHkuIFByZXNzaW5nIHRoZSBFc2NhcGUga2V5IGNsb3NlcyB0aGUgc3VibWVudSBhbmQgcmVzdG9yZXMgZm9jdXMgdG8gdGhlIHBhcmVudCBtZW51IGl0ZW0uPC9wPlxuICAgICAqIDxoMz5TY3JlZW4gUmVhZGVyIEFjY2Vzc2liaWxpdHk8L2gzPlxuICAgICAqIDxwPlRoZSBhY2Nlc3NpYmxlIG1lZ2EgbWVudSBtb2RlbHMgaXRzIHVzZSBvZiBXQUktQVJJQSBSb2xlcywgU3RhdGVzLCBhbmQgUHJvcGVydGllcyBhZnRlciB0aG9zZSBkZXNjcmliZWQgaW4gdGhlIHtAbGluayBodHRwOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvI21lbnV8V0FJLUFSSUEgTWVudSBvciBNZW51IGJhciAod2lkZ2V0KSBkZXNpZ24gcGF0dGVybn0gd2l0aCBzb21lIG5vdGFibGUgZXhjZXB0aW9ucywgc28gdGhhdCBpdCBiZWhhdmVzIGJldHRlciB3aXRoIHNjcmVlbiByZWFkZXIgdXNlciBleHBlY3RhdGlvbnMgZm9yIGdsb2JhbCBuYXZpZ2F0aW9uLiBXZSBkb24ndCB1c2UgPGNvZGUgY2xhc3M9XCJwcmV0dHlwcmludCBwcmV0dHlwcmludGVkXCIgc3R5bGU9XCJcIj48c3BhbiBjbGFzcz1cInBsblwiPnJvbGU8L3NwYW4+PHNwYW4gY2xhc3M9XCJwdW5cIj49PC9zcGFuPjxzcGFuIGNsYXNzPVwic3RyXCI+XCJtZW51XCI8L3NwYW4+PC9jb2RlPiBmb3IgdGhlIG1lbnUgY29udGFpbmVyIGFuZCA8Y29kZSBjbGFzcz1cInByZXR0eXByaW50IHByZXR0eXByaW50ZWRcIiBzdHlsZT1cIlwiPjxzcGFuIGNsYXNzPVwicGxuXCI+cm9sZTwvc3Bhbj48c3BhbiBjbGFzcz1cInB1blwiPj08L3NwYW4+PHNwYW4gY2xhc3M9XCJzdHJcIj5cIm1lbnVpdGVtXCI8L3NwYW4+PC9jb2RlPiBmb3IgZWFjaCBvZiB0aGUgbGlua3MgdGhlcmVpbiwgYmVjYXVzZSBpZiB3ZSBkbywgYXNzaXN0aXZlIHRlY2hub2xvZ3kgd2lsbCBubyBsb25nZXIgaW50ZXJwcmV0IHRoZSBsaW5rcyBhcyBsaW5rcywgYnV0IGluc3RlYWQsIGFzIG1lbnUgaXRlbXMsIGFuZCB0aGUgbGlua3MgaW4gb3VyIGdsb2JhbCBuYXZpZ2F0aW9uIHdpbGwgbm8gbG9uZ2VyIHNob3cgdXAgd2hlbiBhIHNjcmVlbiByZWFkZXIgdXNlciBleGVjdXRlcyBhIHNob3J0Y3V0IGNvbW1hbmQgdG8gYnJpbmcgdXAgYSBsaXN0IG9mIGxpbmtzIGluIHRoZSBwYWdlLjwvcD5cbiAgICAgKiBAZXhhbXBsZSA8aDQ+SFRNTDwvaDQ+PGhyLz5cbiZsdDtuYXYmZ3Q7XG4gICAgJmx0O3VsIGNsYXNzPSZxdW90O25hdi1tZW51JnF1b3Q7Jmd0O1xuICAgICAgICAmbHQ7bGkgY2xhc3M9JnF1b3Q7bmF2LWl0ZW0mcXVvdDsmZ3Q7XG4gICAgICAgICAgICAmbHQ7YSBocmVmPSZxdW90Oz9tb3ZpZSZxdW90OyZndDtNb3ZpZXMmbHQ7L2EmZ3Q7XG4gICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O3N1Yi1uYXYmcXVvdDsmZ3Q7XG4gICAgICAgICAgICAgICAgJmx0O3VsIGNsYXNzPSZxdW90O3N1Yi1uYXYtZ3JvdXAmcXVvdDsmZ3Q7XG4gICAgICAgICAgICAgICAgICAgICZsdDtsaSZndDsmbHQ7YSBocmVmPSZxdW90Oz9tb3ZpZSZhbXA7Z2VucmU9MCZxdW90OyZndDtBY3Rpb24gJmFtcDthbXA7IEFkdmVudHVyZSZsdDsvYSZndDsmbHQ7L2xpJmd0O1xuICAgICAgICAgICAgICAgICAgICAmbHQ7bGkmZ3Q7Jmx0O2EgaHJlZj0mcXVvdDs/bW92aWUmYW1wO2dlbnJlPTImcXVvdDsmZ3Q7Q2hpbGRyZW4gJmFtcDthbXA7IEZhbWlseSZsdDsvYSZndDsmbHQ7L2xpJmd0O1xuICAgICAgICAgICAgICAgICAgICAmbHQ7bGkmZ3Q7JmFtcDsjODIzMDsmbHQ7L2xpJmd0O1xuICAgICAgICAgICAgICAgICZsdDsvdWwmZ3Q7XG4gICAgICAgICAgICAgICAgJmx0O3VsIGNsYXNzPSZxdW90O3N1Yi1uYXYtZ3JvdXAmcXVvdDsmZ3Q7XG4gICAgICAgICAgICAgICAgICAgICZsdDtsaSZndDsmbHQ7YSBocmVmPSZxdW90Oz9tb3ZpZSZhbXA7Z2VucmU9NyZxdW90OyZndDtEcmFtYXMmbHQ7L2EmZ3Q7Jmx0Oy9saSZndDtcbiAgICAgICAgICAgICAgICAgICAgJmx0O2xpJmd0OyZsdDthIGhyZWY9JnF1b3Q7P21vdmllJmFtcDtnZW5yZT05JnF1b3Q7Jmd0O0ZvcmVpZ24mbHQ7L2EmZ3Q7Jmx0Oy9saSZndDtcbiAgICAgICAgICAgICAgICAgICAgJmx0O2xpJmd0OyZhbXA7IzgyMzA7Jmx0Oy9saSZndDtcbiAgICAgICAgICAgICAgICAmbHQ7L3VsJmd0O1xuICAgICAgICAgICAgICAgICZsdDt1bCBjbGFzcz0mcXVvdDtzdWItbmF2LWdyb3VwJnF1b3Q7Jmd0O1xuICAgICAgICAgICAgICAgICAgICAmbHQ7bGkmZ3Q7Jmx0O2EgaHJlZj0mcXVvdDs/bW92aWUmYW1wO2dlbnJlPTE0JnF1b3Q7Jmd0O011c2ljYWxzJmx0Oy9hJmd0OyZsdDsvbGkmZ3Q7XG4gICAgICAgICAgICAgICAgICAgICZsdDtsaSZndDsmbHQ7YSBocmVmPSZxdW90Oz9tb3ZpZSZhbXA7Z2VucmU9MTUmcXVvdDsmZ3Q7Um9tYW5jZSZsdDsvYSZndDsmbHQ7L2xpJmd0O1xuICAgICAgICAgICAgICAgICAgICAmbHQ7bGkmZ3Q7JmFtcDsjODIzMDsmbHQ7L2xpJmd0O1xuICAgICAgICAgICAgICAgICZsdDsvdWwmZ3Q7XG4gICAgICAgICAgICAmbHQ7L2RpdiZndDtcbiAgICAgICAgJmx0Oy9saSZndDtcbiAgICAgICAgJmx0O2xpIGNsYXNzPSZxdW90O25hdi1pdGVtJnF1b3Q7Jmd0O1xuICAgICAgICAgICAgJmx0O2EgaHJlZj0mcXVvdDs/dHYmcXVvdDsmZ3Q7VFYgU2hvd3MmbHQ7L2EmZ3Q7XG4gICAgICAgICAgICAmbHQ7ZGl2IGNsYXNzPSZxdW90O3N1Yi1uYXYmcXVvdDsmZ3Q7XG4gICAgICAgICAgICAgICAgJmx0O3VsIGNsYXNzPSZxdW90O3N1Yi1uYXYtZ3JvdXAmcXVvdDsmZ3Q7XG4gICAgICAgICAgICAgICAgICAgICZsdDtsaSZndDsmbHQ7YSBocmVmPSZxdW90Oz90diZhbXA7Z2VucmU9MjAmcXVvdDsmZ3Q7Q2xhc3NpYyBUViZsdDsvYSZndDsmbHQ7L2xpJmd0O1xuICAgICAgICAgICAgICAgICAgICAmbHQ7bGkmZ3Q7Jmx0O2EgaHJlZj0mcXVvdDs/dHYmYW1wO2dlbnJlPTIxJnF1b3Q7Jmd0O0NyaW1lIFRWJmx0Oy9hJmd0OyZsdDsvbGkmZ3Q7XG4gICAgICAgICAgICAgICAgICAgICZsdDtsaSZndDsmYW1wOyM4MjMwOyZsdDsvbGkmZ3Q7XG4gICAgICAgICAgICAgICAgJmx0Oy91bCZndDtcbiAgICAgICAgICAgICAgICAmbHQ7dWwgY2xhc3M9JnF1b3Q7c3ViLW5hdi1ncm91cCZxdW90OyZndDtcbiAgICAgICAgICAgICAgICAgICAgJmx0O2xpJmd0OyZsdDthIGhyZWY9JnF1b3Q7P3R2JmFtcDtnZW5yZT0yNyZxdW90OyZndDtSZWFsaXR5IFRWJmx0Oy9hJmd0OyZsdDsvbGkmZ3Q7XG4gICAgICAgICAgICAgICAgICAgICZsdDtsaSZndDsmbHQ7YSBocmVmPSZxdW90Oz90diZhbXA7Z2VucmU9MzAmcXVvdDsmZ3Q7VFYgQWN0aW9uJmx0Oy9hJmd0OyZsdDsvbGkmZ3Q7XG4gICAgICAgICAgICAgICAgICAgICZsdDtsaSZndDsmYW1wOyM4MjMwOyZsdDsvbGkmZ3Q7XG4gICAgICAgICAgICAgICAgJmx0Oy91bCZndDtcbiAgICAgICAgICAgICAgICAmbHQ7dWwgY2xhc3M9JnF1b3Q7c3ViLW5hdi1ncm91cCZxdW90OyZndDtcbiAgICAgICAgICAgICAgICAgICAgJmx0O2xpJmd0OyZsdDthIGhyZWY9JnF1b3Q7P3R2JmFtcDtnZW5yZT0zMyZxdW90OyZndDtUViBEcmFtYXMmbHQ7L2EmZ3Q7Jmx0Oy9saSZndDtcbiAgICAgICAgICAgICAgICAgICAgJmx0O2xpJmd0OyZsdDthIGhyZWY9JnF1b3Q7P3R2JmFtcDtnZW5yZT0zNCZxdW90OyZndDtUViBIb3Jyb3ImbHQ7L2EmZ3Q7Jmx0Oy9saSZndDtcbiAgICAgICAgICAgICAgICAgICAgJmx0O2xpJmd0OyZhbXA7IzgyMzA7Jmx0Oy9saSZndDtcbiAgICAgICAgICAgICAgICAmbHQ7L3VsJmd0O1xuICAgICAgICAgICAgJmx0Oy9kaXYmZ3Q7XG4gICAgICAgICZsdDsvbGkmZ3Q7XG4gICAgJmx0Oy91bCZndDtcbiZsdDsvbmF2Jmd0O1xuICAgICAqIEBleGFtcGxlIDxoND5DU1M8L2g0Pjxoci8+XG4mIzQ3OyogUnVkaW1lbnRhcnkgbWVnYSBtZW51IENTUyBmb3IgZGVtb25zdHJhdGlvbiAqJiM0NztcblxuJiM0NzsqIG1lZ2EgbWVudSBsaXN0IComIzQ3O1xuLm5hdi1tZW51IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICB6LWluZGV4OiAxNTtcbn1cblxuJiM0NzsqIGEgdG9wIGxldmVsIG5hdmlnYXRpb24gaXRlbSBpbiB0aGUgbWVnYSBtZW51IComIzQ3O1xuLm5hdi1pdGVtIHtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbn1cblxuJiM0NzsqIGZpcnN0IGRlc2NlbmRhbnQgbGluayB3aXRoaW4gYSB0b3AgbGV2ZWwgbmF2aWdhdGlvbiBpdGVtIComIzQ3O1xuLm5hdi1pdGVtICZndDsgYSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwYWRkaW5nOiAwLjVlbSAxZW07XG4gICAgbWFyZ2luOiAwIDAgLTFweCAwO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xufVxuXG4mIzQ3OyogZm9jdXMvb3BlbiBzdGF0ZXMgb2YgZmlyc3QgZGVzY2VuZGFudCBsaW5rIHdpdGhpbiBhIHRvcCBsZXZlbFxuICAgbmF2aWdhdGlvbiBpdGVtIComIzQ3O1xuLm5hdi1pdGVtICZndDsgYTpmb2N1cyxcbi5uYXYtaXRlbSAmZ3Q7IGEub3BlbiB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RlZGVkZTtcbn1cblxuJiM0NzsqIG9wZW4gc3RhdGUgb2YgZmlyc3QgZGVzY2VuZGFudCBsaW5rIHdpdGhpbiBhIHRvcCBsZXZlbFxuICAgbmF2aWdhdGlvbiBpdGVtIComIzQ3O1xuLm5hdi1pdGVtICZndDsgYS5vcGVuIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgei1pbmRleDogMTtcbn1cblxuJiM0NzsqIHN1Yi1uYXZpZ2F0aW9uIHBhbmVsIComIzQ3O1xuLnN1Yi1uYXYge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHRvcDogMi4yZW07XG4gICAgbWFyZ2luLXRvcDogLTFweDtcbiAgICBwYWRkaW5nOiAwLjVlbSAxZW07XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RlZGVkZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xufVxuXG4mIzQ3Oyogc3ViLW5hdmlnYXRpb24gcGFuZWwgb3BlbiBzdGF0ZSAqJiM0Nztcbi5zdWItbmF2Lm9wZW4ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4mIzQ3OyogbGlzdCBvZiBpdGVtcyB3aXRoaW4gc3ViLW5hdmlnYXRpb24gcGFuZWwgKiYjNDc7XG4uc3ViLW5hdiB1bCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgbWFyZ2luOiAwIDFlbSAwIDA7XG4gICAgcGFkZGluZzogMDtcbn1cblxuJiM0NzsqIGxpc3QgaXRlbSB3aXRoaW4gc3ViLW5hdmlnYXRpb24gcGFuZWwgKiYjNDc7XG4uc3ViLW5hdiBsaSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xufVxuICAgICAqIEBleGFtcGxlIDxoND5KYXZhU2NyaXB0PC9oND48aHIvPlxuJmx0OyEtLSBpbmNsdWRlIGpxdWVyeSAtLSZndDtcbiZsdDtzY3JpcHQgc3JjPSZxdW90O2h0dHA6Ly9jb2RlLmpxdWVyeS5jb20vanF1ZXJ5LTEuMTAuMS5taW4uanMmcXVvdDsmZ3Q7Jmx0Oy9zY3JpcHQmZ3Q7XG5cbiZsdDshLS0gaW5jbHVkZSB0aGUganF1ZXJ5LWFjY2Vzc2libGVNZWdhTWVudSBwbHVnaW4gc2NyaXB0IC0tJmd0O1xuJmx0O3NjcmlwdCBzcmM9JnF1b3Q7anMvanF1ZXJ5LWFjY2Vzc2libGVNZWdhTWVudS5qcyZxdW90OyZndDsmbHQ7L3NjcmlwdCZndDtcblxuJmx0OyEtLSBpbml0aWFsaXplIGEgc2VsZWN0b3IgYXMgYW4gYWNjZXNzaWJsZU1lZ2FNZW51IC0tJmd0O1xuJmx0O3NjcmlwdCZndDtcbiAgICAkKCZxdW90O25hdjpmaXJzdCZxdW90OykuYWNjZXNzaWJsZU1lZ2FNZW51KHtcbiAgICAgICAgJiM0NzsqIHByZWZpeCBmb3IgZ2VuZXJhdGVkIHVuaXF1ZSBpZCBhdHRyaWJ1dGVzLCB3aGljaCBhcmUgcmVxdWlyZWQgdG8gaW5kaWNhdGUgYXJpYS1vd25zLCBhcmlhLWNvbnRyb2xzIGFuZCBhcmlhLWxhYmVsbGVkYnkgKiYjNDc7XG4gICAgICAgIHV1aWRQcmVmaXg6ICZxdW90O2FjY2Vzc2libGUtbWVnYW1lbnUmcXVvdDssXG5cbiAgICAgICAgJiM0NzsqIGNzcyBjbGFzcyB1c2VkIHRvIGRlZmluZSB0aGUgbWVnYW1lbnUgc3R5bGluZyAqJiM0NztcbiAgICAgICAgbWVudUNsYXNzOiAmcXVvdDtuYXYtbWVudSZxdW90OyxcblxuICAgICAgICAmIzQ3OyogY3NzIGNsYXNzIGZvciBhIHRvcC1sZXZlbCBuYXZpZ2F0aW9uIGl0ZW0gaW4gdGhlIG1lZ2FtZW51IComIzQ3O1xuICAgICAgICB0b3BOYXZJdGVtQ2xhc3M6ICZxdW90O25hdi1pdGVtJnF1b3Q7LFxuXG4gICAgICAgICYjNDc7KiBjc3MgY2xhc3MgZm9yIGEgbWVnYW1lbnUgcGFuZWwgKiYjNDc7XG4gICAgICAgIHBhbmVsQ2xhc3M6ICZxdW90O3N1Yi1uYXYmcXVvdDssXG5cbiAgICAgICAgJiM0NzsqIGNzcyBjbGFzcyBmb3IgYSBncm91cCBvZiBpdGVtcyB3aXRoaW4gYSBtZWdhbWVudSBwYW5lbCAqJiM0NztcbiAgICAgICAgcGFuZWxHcm91cENsYXNzOiAmcXVvdDtzdWItbmF2LWdyb3VwJnF1b3Q7LFxuXG4gICAgICAgICYjNDc7KiBjc3MgY2xhc3MgZm9yIHRoZSBob3ZlciBzdGF0ZSAqJiM0NztcbiAgICAgICAgaG92ZXJDbGFzczogJnF1b3Q7aG92ZXImcXVvdDssXG5cbiAgICAgICAgJiM0NzsqIGNzcyBjbGFzcyBmb3IgdGhlIGZvY3VzIHN0YXRlIComIzQ3O1xuICAgICAgICBmb2N1c0NsYXNzOiAmcXVvdDtmb2N1cyZxdW90OyxcblxuICAgICAgICAmIzQ3OyogY3NzIGNsYXNzIGZvciB0aGUgb3BlbiBzdGF0ZSAqJiM0NztcbiAgICAgICAgb3BlbkNsYXNzOiAmcXVvdDtvcGVuJnF1b3Q7XG4gICAgfSk7XG4mbHQ7L3NjcmlwdCZndDtcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE1lZ2EgTWVudSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnV1aWRQcmVmaXg9YWNjZXNzaWJsZS1tZWdhbWVudV0gLSBQcmVmaXggZm9yIGdlbmVyYXRlZCB1bmlxdWUgaWQgYXR0cmlidXRlcywgd2hpY2ggYXJlIHJlcXVpcmVkIHRvIGluZGljYXRlIGFyaWEtb3ducywgYXJpYS1jb250cm9scyBhbmQgYXJpYS1sYWJlbGxlZGJ5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1lbnVDbGFzcz1hY2Nlc3NpYmxlLW1lZ2FtZW51XSAtIENTUyBjbGFzcyB1c2VkIHRvIGRlZmluZSB0aGUgbWVnYW1lbnUgc3R5bGluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50b3BOYXZJdGVtQ2xhc3M9YWNjZXNzaWJsZS1tZWdhbWVudS10b3AtbmF2LWl0ZW1dIC0gQ1NTIGNsYXNzIGZvciBhIHRvcC1sZXZlbCBuYXZpZ2F0aW9uIGl0ZW0gaW4gdGhlIG1lZ2FtZW51XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBhbmVsQ2xhc3M9YWNjZXNzaWJsZS1tZWdhbWVudS1wYW5lbF0gLSBDU1MgY2xhc3MgZm9yIGEgbWVnYW1lbnUgcGFuZWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucGFuZWxHcm91cENsYXNzPWFjY2Vzc2libGUtbWVnYW1lbnUtcGFuZWwtZ3JvdXBdIC0gQ1NTIGNsYXNzIGZvciBhIGdyb3VwIG9mIGl0ZW1zIHdpdGhpbiBhIG1lZ2FtZW51IHBhbmVsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmhvdmVyQ2xhc3M9aG92ZXJdIC0gQ1NTIGNsYXNzIGZvciB0aGUgaG92ZXIgc3RhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZm9jdXNDbGFzcz1mb2N1c10gLSBDU1MgY2xhc3MgZm9yIHRoZSBmb2N1cyBzdGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vcGVuQ2xhc3M9b3Blbl0gLSBDU1MgY2xhc3MgZm9yIHRoZSBvcGVuIHN0YXRlXG4gICAgICovXG4gICAgJC5mbltwbHVnaW5OYW1lXSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEkLmRhdGEodGhpcywgXCJwbHVnaW5fXCIgKyBwbHVnaW5OYW1lKSkge1xuICAgICAgICAgICAgICAgICQuZGF0YSh0aGlzLCBcInBsdWdpbl9cIiArIHBsdWdpbk5hbWUsIG5ldyAkLmZuW3BsdWdpbk5hbWVdLkFjY2Vzc2libGVNZWdhTWVudSh0aGlzLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkLmZuW3BsdWdpbk5hbWVdLkFjY2Vzc2libGVNZWdhTWVudSA9IEFjY2Vzc2libGVNZWdhTWVudTtcblxuICAgIC8qIDpmb2N1c2FibGUgYW5kIDp0YWJiYWJsZSBzZWxlY3RvcnMgZnJvbVxuICAgICAgIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS11aS9tYXN0ZXIvdWkvanF1ZXJ5LnVpLmNvcmUuanMgKi9cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmlzaWJsZShlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiAkLmV4cHIuZmlsdGVycy52aXNpYmxlKGVsZW1lbnQpICYmICEkKGVsZW1lbnQpLnBhcmVudHMoKS5hZGRCYWNrKCkuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkLmNzcyh0aGlzLCBcInZpc2liaWxpdHlcIikgPT09IFwiaGlkZGVuXCI7XG4gICAgICAgIH0pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvY3VzYWJsZShlbGVtZW50LCBpc1RhYkluZGV4Tm90TmFOKSB7XG4gICAgICAgIHZhciBtYXAsIG1hcE5hbWUsIGltZyxcbiAgICAgICAgICAgIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXCJhcmVhXCIgPT09IG5vZGVOYW1lKSB7XG4gICAgICAgICAgICBtYXAgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICBtYXBOYW1lID0gbWFwLm5hbWU7XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuaHJlZiB8fCAhbWFwTmFtZSB8fCBtYXAubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJtYXBcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltZyA9ICQoXCJpbWdbdXNlbWFwPSNcIiArIG1hcE5hbWUgKyBcIl1cIilbMF07XG4gICAgICAgICAgICByZXR1cm4gISFpbWcgJiYgdmlzaWJsZShpbWcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KG5vZGVOYW1lKSA/ICFlbGVtZW50LmRpc2FibGVkIDpcbiAgICAgICAgICAgICAgICBcImFcIiA9PT0gbm9kZU5hbWUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5ocmVmIHx8IGlzVGFiSW5kZXhOb3ROYU4gOlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUYWJJbmRleE5vdE5hTikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCBhbmQgYWxsIG9mIGl0cyBhbmNlc3RvcnMgbXVzdCBiZSB2aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZShlbGVtZW50KTtcbiAgICB9XG5cbiAgICAkLmV4dGVuZCgkLmV4cHJbXCI6XCJdLCB7XG4gICAgICAgIGRhdGE6ICQuZXhwci5jcmVhdGVQc2V1ZG8gPyAkLmV4cHIuY3JlYXRlUHNldWRvKGZ1bmN0aW9uIChkYXRhTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhJC5kYXRhKGVsZW0sIGRhdGFOYW1lKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pIDogLy8gc3VwcG9ydDogalF1ZXJ5IDwxLjhcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZWxlbSwgaSwgbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhJC5kYXRhKGVsZW0sIG1hdGNoWzNdKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgIGZvY3VzYWJsZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmb2N1c2FibGUoZWxlbWVudCwgIWlzTmFOKCQuYXR0cihlbGVtZW50LCBcInRhYmluZGV4XCIpKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGFiYmFibGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgdGFiSW5kZXggPSAkLmF0dHIoZWxlbWVudCwgXCJ0YWJpbmRleFwiKSxcbiAgICAgICAgICAgICAgICBpc1RhYkluZGV4TmFOID0gaXNOYU4odGFiSW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIChpc1RhYkluZGV4TmFOIHx8IHRhYkluZGV4ID49IDApICYmIGZvY3VzYWJsZShlbGVtZW50LCAhaXNUYWJJbmRleE5hTik7XG4gICAgICAgIH1cbiAgICB9KTtcbn0oalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KSk7XG4iXX0=
